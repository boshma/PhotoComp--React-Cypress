./tsconfig.json:
{
{
    "compilerOptions": {
        "jsx": "react-jsx",
        "esModuleInterop": true,
        "target": "ES2020",
        "module": "ESNext",
        "lib": ["ES2020", "DOM", "DOM.Iterable"],
        "strict": true,
        "skipLibCheck": true,
        "moduleResolution": "bundler",
        "isolatedModules": true,
        "noEmit": true
    },
    "include": ["src", "tests/__mocks__/fileMock.js"],
    "references": [
        { "path": "./tsconfig.jest.json" },
        { "path": "./tsconfig.app.json" },
        { "path": "./tsconfig.node.json" }
    ]
}
}

./README.md:
{
# PhotoComp--React-Cypress
Would hold PhotoComp's Frontend Development

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```

}

./package.json:
{
{
    "name": "photocomp-frontend",
    "private": true,
    "version": "0.0.0",
    "type": "module",
    "scripts": {
        "dev": "vite",
        "test": "jest",
        "coverage": "jest --coverage",
        "build": "tsc -b && vite build",
        "lint": "eslint .",
        "preview": "vite preview",
        "format": "prettier . --write",
        "cypress:open": "cypress open --config-file cypress-config.ts",
        "cypress:run": "cypress run --config-file cypress-config.ts"
    },
    "dependencies": {
        "@popperjs/core": "^2.11.8",
        "axios": "^1.8.4",
        "bootstrap": "^5.3.3",
        "bootstrap-icons": "^1.11.3",
        "date-fns": "^4.1.0",
        "photocomp-frontend": "file:",
        "react": "^19.0.0",
        "react-bootstrap": "^2.10.9",
        "react-bootstrap-icons": "^1.11.5",
        "react-dom": "^19.0.0"
    },
    "devDependencies": {
        "@eslint/js": "^9.21.0",
        "@testing-library/dom": "^10.4.0",
        "@testing-library/jest-dom": "^6.6.3",
        "@testing-library/react": "^16.2.0",
        "@types/jest": "^29.5.14",
        "@types/react": "^19.0.12",
        "@types/react-dom": "^19.0.4",
        "@vitejs/plugin-react": "^4.3.4",
        "cypress": "^14.2.0",
        "eslint": "^9.21.0",
        "eslint-plugin-react-hooks": "^5.1.0",
        "eslint-plugin-react-refresh": "^0.4.19",
        "globals": "^15.15.0",
        "identity-obj-proxy": "^3.0.0",
        "jest": "^29.7.0",
        "jest-environment-jsdom": "^29.7.0",
        "prettier": "^3.5.3",
        "react-router-dom": "^7.4.1",
        "sass": "^1.86.0",
        "ts-jest": "^29.3.0",
        "ts-node": "^10.9.2",
        "typescript": "~5.7.2",
        "typescript-eslint": "^8.24.1",
        "vite": "^6.2.0"
    },
    "overrides": {
        "@cypress/react18": {
            "@types/react-dom": "$@types/react-dom"
        }
    }
}
}

./cypress.config.ts:
{
import { defineConfig } from 'cypress';

export default defineConfig({
    e2e: {
        baseUrl: 'http://localhost:5173',
        setupNodeEvents(on, config) {
            // implement node event listeners here
        },
    },
    component: {
        devServer: {
            framework: 'react',
            bundler: 'vite',
        },
        indexHtmlFile: 'cypress/support/component-index.html',
        setupNodeEvents(on, config) {
            // implement node event listeners here
        },
    },
});
}

./jest.config.ts:
{
import type { Config } from '@jest/types';

const config: Config.InitialOptions = {
    testEnvironment: 'jsdom',
    preset: 'ts-jest',
    moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json'],
    transform: {
        '^.+\\.tsx?$': 'ts-jest',
    },
    setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
    moduleNameMapper: {
        '\\.(css|less|sass|scss)$': 'identity-obj-proxy',
        '\\.(gif|ttf|eot|svg|png)$': '<rootDir>/tests/__mocks__/fileMock.js',
    },
};

export default config;
}

./jest.setup.ts:
{
import '@testing-library/jest-dom';

// Add TextEncoder polyfill
if (typeof global.TextEncoder === 'undefined') {
    const { TextEncoder, TextDecoder } = require('util');
    global.TextEncoder = TextEncoder;
    global.TextDecoder = TextDecoder;
}
}

./eslint.config.js:
{
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
    { ignores: ['dist'] },
    {
        extends: [js.configs.recommended, ...tseslint.configs.recommended],
        files: ['**/*.{ts,tsx}'],
        languageOptions: {
            ecmaVersion: 2020,
            globals: globals.browser,
        },
        plugins: {
            'react-hooks': reactHooks,
            'react-refresh': reactRefresh,
        },
        rules: {
            ...reactHooks.configs.recommended.rules,
            'react-refresh/only-export-components': ['warn', { allowConstantExport: true }],
            '@typescript-eslint/no-explicit-any': 'off',
            '@typescript-eslint/no-empty-object-type': 'off',
        },
    }
);
}

./index.html:
{
<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <link rel="icon" type="image/svg+xml" href="/vite.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>PhotoComp</title>
    </head>

    <body>
        <div id="root"></div>
        <script type="module" src="/src/main.tsx"></script>
    </body>
</html>
}

./vite.config.ts:
{
import { defineConfig, loadEnv } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig(({ mode }) => {
    const env = loadEnv(mode, process.cwd(), '');
    return {
        plugins: [react()],
        define: {
            'process.env': env,
        },
        test: {
            globals: true,
            environment: 'jsdom',
            alias: {
                '^.+\\.(jpg|jpeg|png|gif|svg)$': '/tests/__mocks__/fileMock.ts',
            },
        },
    };
});
}

./tsconfig.app.json:
{
{
    "compilerOptions": {
        "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
        "target": "ES2020",
        "useDefineForClassFields": true,
        "lib": ["ES2020", "DOM", "DOM.Iterable"],
        "module": "ESNext",
        "skipLibCheck": true,

        /* Bundler mode */
        "moduleResolution": "bundler",
        "allowImportingTsExtensions": true,
        "isolatedModules": true,
        "moduleDetection": "force",
        "noEmit": true,
        "jsx": "react-jsx",

        /* Linting */
        "strict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noFallthroughCasesInSwitch": true,
        "noUncheckedSideEffectImports": true
    },
    "include": ["src", "tests/__mocks__/fileMock.js"]
}
}

./tsconfig.jest.json:
{
{
    "extends": "./tsconfig.json",
    "compilerOptions": {
        "target": "ES2020",
        "module": "CommonJS",
        "noEmit": true,
        "types": [
            "node",
            "cypress",
            "@testing-library/cypress",
            "jest",
            "@testing-library/jest-dom"
        ]
    },
    "include": ["src", "tests", "jest.setup.ts", "src/types"]
}
}

./tsconfig.node.json:
{
{
    "compilerOptions": {
        "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
        "target": "ES2022",
        "lib": ["ES2023"],
        "module": "ESNext",
        "skipLibCheck": true,

        /* Bundler mode */
        "moduleResolution": "bundler",
        "allowImportingTsExtensions": true,
        "isolatedModules": true,
        "moduleDetection": "force",
        "noEmit": true,

        /* Linting */
        "strict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noFallthroughCasesInSwitch": true,
        "noUncheckedSideEffectImports": true
    },
    "include": ["vite.config.ts"]
}
}

src/App.tsx:
{
import { Routes, Route } from 'react-router-dom';

import Home from './pages/Home/Home';
import Register from './pages/Register/Register';
import Login from './pages/Login/Login';
import Members from './pages/Members/Members';
import Membership from './pages/Membership/Membership';
import Organizations from './pages/Organizations/ViewOrganizations';
import SingleEvents from './pages/Events/SingleEvents';
import Events from './pages/Events/ViewEvents';
import Photos from './pages/Photos/viewPhotos';
import ProtectedRoute from './components/routes/ProtectedRoute/ProtectedRoute';
import Footer from './components/bars/Footer/Footer';
import AccountSettings from './pages/AccountSettings/AccountSettings';
import CreateOrganization from './pages/Organizations/CreateOrganization/CreateOrganization';
import Logout from './pages/Logout';
import UploadEventPhoto from './pages/Events/UploadEventPhoto';
import CreateEvent from './pages/Events/CreateEvent';
import PhotoGalleryPage from './pages/PhotoGallery/PhotoGalleryPage';
import PhotoTaggingPage from './pages/PhotoTagging/PhotoTaggingPage';
import OrganizationDetails from './pages/Organizations/OrganizationDetails';
import EventDetails from './pages/Events/EventDetails';



function App() {
    return (
        <>
            <Routes>
                <Route path="/register" element={<Register />} />
                <Route path="/login" element={<Login />} />
                <Route path="/logout" element={<Logout />} />
                <Route path="/" element={<Home />} />
                <Route path="/organizations" element={<Organizations />} />
                <Route path="/events" element={<Events />} />
                <Route
                    path="/organizations/create"
                    element={
                        <ProtectedRoute>
                            <CreateOrganization />
                        </ProtectedRoute>
                    }
                />
                <Route path="/organizations/:id/details" element={<OrganizationDetails />} />
                <Route path="/organizations/:id/events" element={<SingleEvents />} />
                <Route path="/account-settings" element={
                    <ProtectedRoute>
                        <AccountSettings />
                    </ProtectedRoute>
                    } />
                <Route
                    path="/organizations/:orgId/members/requests"
                    element={
                        <ProtectedRoute>
                            <Membership />
                        </ProtectedRoute>
                    }
                />
                <Route
                    path="/organizations/:id/events/create"
                    element={
                        <ProtectedRoute>
                            <CreateEvent />
                        </ProtectedRoute>
                    }
                />
                <Route
                    path="/organizations/:id/events/:eid/details"
                    element={
                        <ProtectedRoute>
                            <EventDetails/>
                        </ProtectedRoute>
                    }
                />
                <Route
                    path="/organizations/:orgId/members"
                    element={
                        <ProtectedRoute>
                            <Members />
                        </ProtectedRoute>
                    }
                />
                <Route
                    path="/organizations/:id/events/:eid/photos"
                    element={
                        <ProtectedRoute>
                            <Photos />
                        </ProtectedRoute>
                    }
                />
                <Route
                    path="/organizations/:id/events/:eid/photos/upload"
                    element={
                        <ProtectedRoute>
                            <UploadEventPhoto />
                        </ProtectedRoute>
                    }
                />
                {/* for viewing individual photos in the carousel */}
                <Route
                    path="/organizations/:id/events/:eid/photos/:photoId"
                    element={
                        <ProtectedRoute>
                            <PhotoGalleryPage />
                        </ProtectedRoute>
                    }
                />
                <Route 
                    path="/organizations/:id/events/:eid/photos/:photoId/tag"
                    element={
                        <ProtectedRoute>
                            <PhotoTaggingPage />
                        </ProtectedRoute>
                    }
                />
            </Routes>
            <Footer />
        </>
    );
}

export default App;
}

src/components/bars/Footer/Footer.tsx:
{
import React from 'react';
import { Container } from 'react-bootstrap';
import { Link } from 'react-router-dom';

interface FooterProps {
    className?: string;
}

const Footer: React.FC<FooterProps> = ({ className = '' }) => {
    return (
        <footer className={`footer bg-dark text-light py-3 text-center ${className}`}>
            <Container fluid className="d-flex justify-content-center align-items-center">
                <div className="d-flex gap-3 text-center">
                    <div className="footer-copyright">
                        © {new Date().getFullYear()} PHOTOCOMP. All rights reserved.
                    </div>
                    <div className="footer-links">
                        <Link to="/content-policy" className="text-light">
                            Content Policy
                        </Link>
                    </div>
                </div>
            </Container>
        </footer>
    );
};

export default Footer;
}

src/components/bars/SearchBar/SearchBar.tsx:
{
import React from 'react';
import { Form, InputGroup } from 'react-bootstrap';
import { Search } from 'react-bootstrap-icons';

interface SearchBarProps {
    placeholder?: string;
    value: string;
    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    onSubmit?: (e: React.FormEvent<HTMLFormElement>) => void;
    className?: string;
    id?: string;
}

const SearchBar: React.FC<SearchBarProps> = ({
    placeholder = 'Search...',
    value,
    onChange,
    onSubmit,
    className = '',
    id = 'topBarSearch',
}) => {
    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (onSubmit) {
            onSubmit(e);
        }
    };

    return (
        <Form onSubmit={handleSubmit} className={`search-bar-form ${className}`}>
            <InputGroup>
                <Form.Control
                    id={id}
                    type="text"
                    placeholder={placeholder}
                    value={value}
                    onChange={onChange}
                    className="form-input bg-dark border-dark text-light search-input"
                    aria-label="Search"
                />
                <InputGroup.Text className="bg-dark border-dark text-light">
                    <Search />
                </InputGroup.Text>
            </InputGroup>
        </Form>
    );
};

export default SearchBar;
}

src/components/bars/SideBar/SideBar.tsx:
{
import React from 'react';
import { Navbar, Nav } from 'react-bootstrap';
import * as icon from 'react-bootstrap-icons';
import { NavLink, useParams } from 'react-router-dom';
import logo from '../../../assets/PhotoCompLogo.png';

const Sidebar: React.FC = () => {
    const { id, eid } = useParams();
    return (
        <Navbar
            collapseOnSelect
            data-bs-theme="dark"
            bg="dark"
            variant="dark"
            className="flex-column sidebar"
        >
            <Navbar.Brand className="mx-auto sidebar-brand">
                <img src={logo} alt="Logo" />
            </Navbar.Brand>
            <Navbar.Toggle aria-controls="responsive-navbar-nav" />
            <Navbar.Collapse id="responsive-navbar-nav">
                <Nav className="flex-column">
                    <NavLink
                        to="/"
                        end
                        className={({ isActive }) =>
                            `nav-link d-flex align-items-center gap-2 sidebar-link ${
                                isActive ? 'active' : ''
                            }`
                        }
                    >
                        <icon.HouseDoor /> Home
                    </NavLink>

                    <NavLink
                        to="/organizations"
                        end
                        className={({ isActive }) =>
                            `nav-link d-flex align-items-center gap-2 sidebar-link ${
                                isActive ? 'active' : ''
                            }`
                        }
                    >
                        <icon.Grid3x3Gap /> Organizations
                    </NavLink>

                    <NavLink
                        to="/events"
                        className={({ isActive }) =>
                            `nav-link d-flex align-items-center gap-2 sidebar-link ${
                                isActive ? 'active' : ''
                            }`
                        }
                    >
                        <icon.Window /> Events
                    </NavLink>

                    <NavLink
                        to={`/organizations/${id || `:id`}/events/${eid || `:eid`}/photos`}
                        end
                        className={({ isActive }) =>
                            `nav-link d-flex align-items-center gap-2 sidebar-link ${
                                isActive ? 'active' : ''
                            }`
                        }
                    >
                        <icon.Images /> Photos
                    </NavLink>
                </Nav>
            </Navbar.Collapse>
        </Navbar>
    );
};

export default Sidebar;
}

src/components/bars/TopBar/TopBar.tsx:
{
import React from 'react';
import { Navbar, Container, Row, Col } from 'react-bootstrap';

interface TopBarProps {
    searchComponent?: React.ReactNode;
    rightComponents?: React.ReactNode;
    className?: string;
    bg?: string;
    variant?: string;
}

const TopBar: React.FC<TopBarProps> = ({
    searchComponent,
    rightComponents,
    className = '',
    bg = 'dark',
    variant = 'dark',
}) => {
    return (
        <Navbar
            bg={bg}
            variant={variant}
            className={`py-2 top-navbar position-sticky ${className}`}
            data-bs-theme={variant}
            expand="lg"
            style={{ top: 0, zIndex: 999 }}
        >
            <Container fluid>
                <Row className="w-100 align-items-center">
                    <Col xs={12} md={9} className="px-0">
                        {searchComponent}
                    </Col>
                    <Col xs={12} md={3} className="px-0 d-flex justify-content-end">
                        {rightComponents}
                    </Col>
                </Row>
            </Container>
        </Navbar>
    );
};

export default TopBar;
}

src/components/cards/galleryCard/GalleryCard.tsx:
{
import React, { useState, useEffect } from 'react';
import { Card } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';

interface Organization {
    id: string;
    name: string;
    description?: string;
    logoUrl?: string;
    PK?: string;
}

interface Event {
    id: string;
    title: string;
    description?: string;
    imageUrl?: string;
    date?: string;
    GSI2PK?: string;
    organizationName?: string;
}

interface Photo {
    id: string;
    url: string;
    urls?: {
        original?: string;
        thumbnail?: string;
        medium?: string;
        large?: string;
    };
    title?: string;
    GSI2PK?: string;
}

type CardItem = Organization | Event | Photo;

interface GalleryCardProps {
    item: CardItem;
    className: string;
    orgName: string | undefined;
}

const GalleryCard: React.FC<GalleryCardProps> = ({ item, className, orgName }) => {
    const navigate = useNavigate();
    const isOrganization = className.includes('organization');
    const isEvent = className.includes('event');
    const isPhoto = className.includes('photo');
    
    // Add state for fallback image
    const [imageError, setImageError] = useState(false);
    const fallbackImage = '/placeholder-image.jpg'; // Default placeholder image
    
    // Function to check if item is an Organization
    const isOrganizationItem = (item: CardItem): item is Organization =>
        'name' in item && !('title' in item && !('organizationName' in item));
    
    // Function to check if item is an Event
    const isEventItem = (item: CardItem): item is Event => 'title' in item;
    
    // Function to check if item is a Photo
    const isPhotoItem = (item: CardItem): item is Photo => 'url' in item;
    
    // Handler for image load errors
    const handleImageError = () => {
        setImageError(true);
    };

    const getBackgroundImage = () => {
        // If we already had an error loading the image, use fallback
        if (imageError) {
            return fallbackImage;
        }
        
        if (isOrganizationItem(item) && item.logoUrl) {
            return item.logoUrl;
        } else if (isEventItem(item) && item.imageUrl) {
            return item.imageUrl;
        } else if (isPhotoItem(item)) {
            // Use medium size if available, otherwise fall back to other sizes
            if (item.urls) {
                if (item.urls.medium) {
                    return item.urls.medium;
                }
                if (item.urls.large) {
                    return item.urls.large;
                }
                if (item.urls.original) {
                    return item.urls.original;
                }
                if (item.urls.thumbnail) {
                    return item.urls.thumbnail;
                }
            }
            return item.url;
        }
        return fallbackImage;
    };

    const getTitle = () => {
        if (isOrganizationItem(item)) {
            return item.name;
        } else if (isEventItem(item)) {
            return item.title;
        } else if (isPhotoItem(item) && item.title) {
            return item.title;
        }
        return '';
    };

    const getDescription = () => {
        let description = '';
        if (isOrganizationItem(item) && item.description) {
            description = item.description;
        } else if (isEventItem(item) && item.description) {
            description = item.description;
        }
        if (description.length > 100) {
            return description.substring(0, 97) + '...';
        }
        return description;
    };

    const getOrganizationName = () => {
        if (isEventItem(item)) {
            if (item.organizationName) {
                return item.organizationName;
            } else if (item.GSI2PK) {
                const match = item.GSI2PK.match(/^ORG#(.+)$/);
                return match ? match[1] : '';
            }
        }
        return '';
    };

    const handleCardClick = (orgName: string | undefined) => {
        return () => {
            if (orgName) {
                if (isOrganizationItem(item)) {
                    navigate(`/organizations/${orgName.toLowerCase()}/events`);
                } else if (isEventItem(item)) {
                    navigate(
                        `/organizations/${orgName.toLowerCase().slice(4)}/events/${item.id}/photos`
                    );
                } else if (isPhotoItem(item)) {
                    // Extract the event ID from GSI2PK (format is EVENT#eventId)
                    const eventId = item.GSI2PK ? item.GSI2PK.replace('EVENT#', '') : '';
                    // Navigate to the photo carousel view for this specific photo
                    const orgNameProcessed = orgName.toLowerCase();
                    navigate(
                        `/organizations/${orgNameProcessed}/events/${eventId}/photos/${item.id}`
                    );
                }
            }
        };
    };

    // Use preloaded image to detect load failures
    useEffect(() => {
        const img = new Image();
        img.src = getBackgroundImage();
        img.onload = () => setImageError(false);
        img.onerror = () => setImageError(true);
    }, [item]); // Re-run when item changes

    return (
        <Card
            className={`gallery-card ${className} ${imageError ? 'image-error' : ''}`}
            onClick={handleCardClick(orgName)}
            style={{
                width: '350px',
                height: '250px',
                backgroundImage: `url(${getBackgroundImage()})`,
                backgroundSize: 'cover',
                backgroundPosition: 'center',
                position: 'relative',
                cursor: 'pointer',
            }}
            onError={handleImageError}
        >
            {/* Only apply overlay to non-photo cards */}
            {!isPhoto && <div className="card-overlay"></div>}
            {isEvent && <div className="organization-badge">{getOrganizationName()}</div>}
            {!isPhoto && (
                <div className="card-content">
                    <h5 className="card-title">{getTitle()}</h5>
                    {getDescription() && <p className="card-description">{getDescription()}</p>}
                </div>
            )}
        </Card>
    );
};

export default GalleryCard;}

src/components/cards/memberCard/MemberCard.tsx:
{
import React from 'react';
import { Card } from 'react-bootstrap';

export interface UserDetails {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
}

export interface Member {
    PK: string;
    SK: string;
    GSI1PK?: string;
    GSI1SK?: string;
    userId: string;
    role: string;
    joinDate: string;
    organizationName: string;
    userDetails: UserDetails;
}

interface MemberCardProps {
    member: Member;
    isSelected: boolean;
    onSelect: (id: string) => void;
}

const MemberCard: React.FC<MemberCardProps> = ({ member, isSelected, onSelect }) => {
    const memberId = member.PK.split('#')[1] || member.userId || member.userDetails.id;
    const formatDate = (dateString: string) => {
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
        });
    };

    const { firstName, lastName } = member.userDetails;
    const displayName = `${firstName} ${lastName}`;
    const isAdmin = member.role === 'ADMIN';

    return (
        <Card
            className={`member-card ${isSelected ? 'selected' : ''} ${isAdmin ? 'admin-card' : 'regular-card'}`}
            onClick={() => onSelect(memberId)}
            style={{
                width: '300px',
                height: '200px',
                position: 'relative',
                cursor: 'pointer',
                backgroundColor: isSelected ? '#4d5154' : '#343a40',
                borderColor: isSelected ? '#fff' : 'transparent',
                borderWidth: isSelected ? '2px' : '1px',
                transition: 'all 0.2s ease-in-out',
            }}
        >
            <div className="card-content text-white p-4 d-flex flex-column justify-content-between h-100">
                <div>
                    <h5 className="card-title">{displayName}</h5>
                </div>

                <div className="card-footer bg-transparent border-0 text-white-50">
                    <small>Member since {formatDate(member.joinDate)}</small>
                </div>
            </div>
        </Card>
    );
};

export default MemberCard;
}

src/components/cards/membershipCard/MembershipCard.tsx:
{
import React from 'react';
import { Card } from 'react-bootstrap';

export interface UserDetails {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
}

export interface MembershipRequest {
    PK: string;
    SK: string;
    GSI1PK: string;
    GSI1SK: string;
    userId: string;
    status: string;
    requestDate: string;
    organizationName: string;
    type: string;
    message?: string;
    userDetails?: UserDetails;
}

interface MembershipCardProps {
    request: MembershipRequest;
    isSelected: boolean;
    onSelect: (id: string) => void;
}

const MembershipCard: React.FC<MembershipCardProps> = ({ request, isSelected, onSelect }) => {
    const requestId = request.SK.split('#')[1] || request.userId;

    const formatDate = (dateString: string) => {
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
        });
    };
    const firstName = request.userDetails?.firstName;
    const lastName = request.userDetails?.lastName;
    const displayName = `${firstName} ${lastName}`;

    return (
        <Card
            className={`membership-card ${isSelected ? 'selected' : ''}`}
            onClick={() => onSelect(requestId)}
            style={{
                width: '300px',
                height: '200px',
                position: 'relative',
                cursor: 'pointer',
                backgroundColor: isSelected ? '#4d5154' : '#343a40',
                borderColor: isSelected ? '#fff' : 'transparent',
                borderWidth: isSelected ? '2px' : '1px',
                transition: 'all 0.2s ease-in-out',
            }}
        >
            <div className="card-content text-white p-4 d-flex flex-column justify-content-between h-100">
                <div>
                    <h5 className="card-title">{displayName}</h5>
                    {request.message && (
                        <p className="card-message text-white-50 small">"{request.message}"</p>
                    )}
                </div>

                <div className="card-footer bg-transparent border-0 text-white-50">
                    <small>Requested on {formatDate(request.requestDate)}</small>
                </div>
            </div>
        </Card>
    );
};

export default MembershipCard;
}

src/components/forms/AuthForm/AuthForm.tsx:
{
import React from 'react';
import { Form, Alert } from 'react-bootstrap';

interface AuthFormProps {
    title: string;
    onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;
    error: string | null;
    children: React.ReactNode;
}

const AuthForm: React.FC<AuthFormProps> = ({ title, onSubmit, error, children }) => {
    return (
        <div className="auth-form" style={{ fontFamily: 'CapsuleWeb' }}>
            <h1 className="auth-title">{title}</h1>
            {error && <Alert variant="danger">{error}</Alert>}
            <Form onSubmit={onSubmit}>{children}</Form>
        </div>
    );
};

export default AuthForm;
}

src/components/forms/AuthForm.tsx:
{
import React from 'react';
import { Form, Alert } from 'react-bootstrap';

interface AuthFormProps {
    title: string;
    onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;
    error: string | null;
    children: React.ReactNode;
}

const AuthForm: React.FC<AuthFormProps> = ({ title, onSubmit, error, children }) => {
    return (
        <div className="auth-form">
            <h1 className="auth-title">{title}</h1>
            {error && <Alert variant="danger">{error}</Alert>}
            <Form onSubmit={onSubmit}>{children}</Form>
        </div>
    );
};

export default AuthForm;
}

src/components/forms/FormButton/FormButton.tsx:
{
import React from 'react';
import { Button } from 'react-bootstrap';

interface FormButtonProps {
    type: 'submit' | 'button' | 'reset';
    className?: string;
    variant?: string;
    onClick?: () => void;
    children: React.ReactNode;
    inverted?: boolean;
}

const FormButton: React.FC<FormButtonProps> = ({
    type,
    className = '',
    variant = 'primary',
    onClick,
    children,
    inverted = false,
}) => {
    // Use inverted styles if specified
    const buttonVariant = inverted ? 'light' : variant;
    const buttonClasses = `${className} ${inverted ? 'text-dark' : ''}`;

    return (
        <Button
            variant={buttonVariant}
            type={type}
            className={`mb-3 ${buttonClasses}`}
            onClick={onClick}
        >
            {children}
        </Button>
    );
};

export default FormButton;
}

src/components/forms/FormButton.tsx:
{
import React from 'react';
import { Button } from 'react-bootstrap';

interface FormButtonProps {
    type: 'submit' | 'button' | 'reset';
    className?: string;
    variant?: string;
    onClick?: () => void;
    children: React.ReactNode;
    inverted?: boolean;
}

const FormButton: React.FC<FormButtonProps> = ({
    type,
    className = '',
    variant = 'primary',
    onClick,
    children,
    inverted = false,
}) => {
    // Use inverted styles if specified
    const buttonVariant = inverted ? 'light' : variant;
    const buttonClasses = `${className} ${inverted ? 'text-dark' : ''}`;

    return (
        <Button
            variant={buttonVariant}
            type={type}
            className={`mb-2 ${buttonClasses}`}
            onClick={onClick}
        >
            {children}
        </Button>
    );
};

export default FormButton;
}

src/components/forms/FormContainer/FormContainer.tsx:
{
import React from 'react';
import { Container, Row, Col } from 'react-bootstrap';

interface FormContainerProps {
    children: React.ReactNode;
}

const FormContainer: React.FC<FormContainerProps> = ({ children }) => {
    return (
        <Container
            fluid
            className="form-container d-flex align-items-center justify-content-center min-vh-100 p-0"
        >
            <Row className="justify-content-center">
                <Col xs={12} className="d-flex justify-content-center">
                    {children}
                </Col>
            </Row>
        </Container>
    );
};

export default FormContainer;
}

src/components/forms/FormContainer.tsx:
{
import React from 'react';
import { Container, Row, Col } from 'react-bootstrap';

interface FormContainerProps {
    children: React.ReactNode;
}

const FormContainer: React.FC<FormContainerProps> = ({ children }) => {
    return (
        <Container
            fluid
            className="form-container d-flex align-items-center justify-content-center min-vh-100 p-0"
        >
            <Row className="justify-content-center">
                <Col xs={12} className="d-flex justify-content-center">
                    {children}
                </Col>
            </Row>
        </Container>
    );
};

export default FormContainer;
}

src/components/forms/FormInput/FormInput.tsx:
{
import React from 'react';
import { Form } from 'react-bootstrap';

interface FormInputProps {
    id: string;
    type: string;
    placeholder: string;
    value: string;
    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    required?: boolean;
    className?: string;
}

const FormInput: React.FC<FormInputProps> = ({
    id,
    type,
    placeholder,
    value,
    onChange,
    required = false,
    className = '',
}) => {
    return (
        <Form.Group controlId={id} className={`${className}`}>
            <Form.Control
                type={type}
                placeholder={placeholder}
                value={value}
                onChange={onChange}
                required={required}
                className="form-input"
            />
        </Form.Group>
    );
};

export default FormInput;
}

src/components/forms/FormInput.tsx:
{
import React from 'react';
import { Form } from 'react-bootstrap';

interface FormInputProps {
    id: string;
    type: string;
    placeholder: string;
    value: string;
    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    required?: boolean;
}

const FormInput: React.FC<FormInputProps> = ({
    id,
    type,
    placeholder,
    value,
    onChange,
    required = false,
}) => {
    return (
        <Form.Group controlId={id} className="w-100 mb-2">
            <Form.Control
                type={type}
                placeholder={placeholder}
                value={value}
                onChange={onChange}
                required={required}
                className="form-input"
            />
        </Form.Group>
    );
};

export default FormInput;
}

src/components/forms/FormRow/FormRow.tsx:
{
import React from 'react';
import { Row, Col } from 'react-bootstrap';

interface FormRowProps {
    children: React.ReactNode;
}

const FormRow: React.FC<FormRowProps> = ({ children }) => {
    return (
        <Row className="form-row mb-2 w-100 mx-0">
            {React.Children.map(children, (child, index) => (
                <Col className="px-0" key={index}>
                    {child}
                </Col>
            ))}
        </Row>
    );
};

export default FormRow;
}

src/components/Gallery.tsx:
{
import React from 'react';
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import GalleryCard from './cards/galleryCard/GalleryCard';
import OrganizationCard from './OrganizationCard';

interface GalleryProps {
    items: any[];
    type?: 'organization' | 'event' | 'photo';
    useNewCard?: boolean;
}
const Gallery: React.FC<GalleryProps> = ({ items, type = 'organization', useNewCard = true }) => {
    return (
        <Container fluid className="py-4">
            <Row className="g-4">
                {items.map(item => (
                    <Col
                        key={item.id}
                        xs={12}
                        sm={6}
                        md={4}
                        lg={4}
                        className="d-flex justify-content-center"
                    >
                        {useNewCard ? (
                            <GalleryCard item={item} className={`${type}-card`} />
                        ) : (
                            <OrganizationCard index={item.id} />
                        )}
                    </Col>
                ))}
            </Row>
        </Container>
    );
};

export default Gallery;
}

src/components/locationAutocomplete/LocationAutocomplete.tsx:
{
import React, { useState, useEffect, useRef } from 'react';
import { Form, ListGroup } from 'react-bootstrap';
import axios from 'axios';

interface LocationAutocompleteProps {
  id: string,
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  required?: boolean;
  className?: string;
}

interface LocationSuggestion {
  place_id: number;
  display_name: string;
  lat: string;
  lon: string;
}

const LocationAutocomplete: React.FC<LocationAutocompleteProps> = ({
  id,
  value,
  onChange,
  placeholder = 'Enter event location',
  required = false,
  className = '',
}) => {
  const [inputValue, setInputValue] = useState(value);
  const [suggestions, setSuggestions] = useState<LocationSuggestion[]>([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const wrapperRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (wrapperRef.current && !wrapperRef.current.contains(event.target as Node)) {
        setShowSuggestions(false);
      }
    }
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  useEffect(() => {
    const debounceTimeout = setTimeout(() => {
      if (inputValue && inputValue.length > 3) {
        fetchSuggestions(inputValue);
      } else {
        setSuggestions([]);
      }
    }, 500);

    return () => {
      clearTimeout(debounceTimeout);
    };
  }, [inputValue]);

  const fetchSuggestions = async (query: string) => {
    if (!query) return;
    
    setIsLoading(true);
    try {
      const response = await axios.get(
        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=5`
      );
      
      setSuggestions(response.data);
      setShowSuggestions(true);
    } catch (error) {
      console.error('Error fetching location suggestions:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    onChange(newValue); 
  };

  const handleSelectSuggestion = (suggestion: LocationSuggestion) => {
    setInputValue(suggestion.display_name);
    onChange(suggestion.display_name);
    setShowSuggestions(false);
  };

  return (
    <div ref={wrapperRef} className="position-relative">
      <Form.Label style={{ fontFamily: 'Michroma, sans-serif' }} className="fs-4"> 
        Location 
      </Form.Label>
      <Form.Control
        id={id}
        type="text"
        placeholder={placeholder}
        value={inputValue}
        onChange={handleInputChange}
        className={`location-input ${className}`}
        required={required}
        autoComplete="off"
      />
      
      {isLoading && (
        <div className="position-absolute end-0 top-0 mt-2 me-2">
          <span className="spinner-border spinner-border-sm text-secondary" role="status" aria-hidden="true"></span>
        </div>
      )}
      
      {showSuggestions && suggestions.length > 0 && (
        <ListGroup>
          {suggestions.map((suggestion) => (
            <ListGroup.Item 
              key={suggestion.place_id}
              action
              onClick={() => handleSelectSuggestion(suggestion)}
              className="py-2 px-3 text-truncate"
            >
              {suggestion.display_name}
            </ListGroup.Item>
          ))}
        </ListGroup>
      )}
    </div>
  );
};

export default LocationAutocomplete;
}

src/components/memberRow/MemberRow.tsx:
{
import React, { useState } from 'react';
import { Button } from 'react-bootstrap';
import MemberCard, { Member } from '../cards/memberCard/MemberCard';

interface MemberRowProps {
    title: string;
    members: Member[];
    onAction: (actionType: string, memberId: string) => void;
    actionTypes: string[];
    actionLabels: string[];
}

const MemberRow: React.FC<MemberRowProps> = ({
    title,
    members,
    onAction,
    actionTypes,
    actionLabels,
}) => {
    const [selectedMemberId, setSelectedMemberId] = useState<string | null>(null);
    const [expandedRow, setExpandedRow] = useState<boolean>(false);
    const [displayCount, setDisplayCount] = useState<number>(3);

    const handleSelect = (memberId: string) => {
        setSelectedMemberId(memberId === selectedMemberId ? null : memberId);
    };

    const handleSeeMore = () => {
        setExpandedRow(true);
        setDisplayCount(members.length);
    };

    const handleChange = (actionType: string, selectedMemberId: string) => {
        return () => {
            setSelectedMemberId(null);
            onAction(actionType, selectedMemberId);
        };
    };

    const membersToDisplay = members.slice(0, expandedRow ? members.length : displayCount);

    return (
        <div className="member-row mb-4">
            <h3 className="text-white mb-3">{title}</h3>
            <div
                className={`row-container ${expandedRow ? 'expanded' : ''}`}
                style={{
                    overflowX: 'auto',
                    display: 'flex',
                    gap: '15px',
                    paddingBottom: '10px',
                    whiteSpace: 'nowrap',
                    scrollbarWidth: 'thin',
                    msOverflowStyle: 'none',
                }}
            >
                {membersToDisplay.map(member => (
                    <div
                        key={member.userId}
                        style={{
                            minWidth: '300px',
                            flexShrink: 0,
                            display: 'inline-block',
                        }}
                    >
                        <MemberCard
                            member={member}
                            isSelected={member.userId === selectedMemberId}
                            onSelect={handleSelect}
                        />
                    </div>
                ))}

                {!expandedRow && members.length > displayCount && (
                    <div
                        style={{
                            minWidth: '100px',
                            display: 'inline-flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            flexShrink: 0,
                        }}
                    >
                        <Button className="p-1" variant="primary" onClick={handleSeeMore}>
                            See more
                        </Button>
                    </div>
                )}
            </div>

            {selectedMemberId && (
                <div className="action-buttons mt-3 mb-4 d-flex gap-3">
                    {actionTypes.map((actionType, index) => (
                        <Button
                            key={actionType}
                            variant={
                                actionType.includes('remove') || actionType.includes('demote')
                                    ? 'danger'
                                    : 'success'
                            }
                            onClick={handleChange(actionType, selectedMemberId)}
                        >
                            {actionLabels[index]}
                        </Button>
                    ))}
                </div>
            )}
        </div>
    );
};

export default MemberRow;
}

src/components/navButton/NavButton.tsx:
{
import React from 'react';
import { Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';

interface BackButtonProps {
    to?: string;
    className?: string;
    variant?: string;
    children?: React.ReactNode;
}

const BackButton: React.FC<BackButtonProps> = ({
    to = '/',
    className = '',
    variant = 'primary',
    children,
}) => {
    const navigate = useNavigate();

    const handleClick = () => {
        navigate(to);
    };

    return (
        <Button
            className={`${className}`}
            variant={`${variant} custom-create-button`}
            onClick={handleClick}
        >
            {children || 'Back'}
        </Button>
    );
};

export default BackButton;
}

src/components/OrganizationCard.tsx:
{
import React from 'react';
import Card from 'react-bootstrap/Card';
import Button from 'react-bootstrap/Button';

interface OrgCardProps {
    index: number;
}

const OrganizationCard: React.FC<OrgCardProps> = ({ index }) => {
    return (
        <Card className="mb-3">
            <Card.Img
                variant="top"
                src={`https://picsum.photos/200?random=${index}`}
                alt={`Random ${index}`}
            />
            <Card.Body>
                <Card.Title>Organization {index}</Card.Title>
                <Card.Text>
                    This is a short description of the organization. More details can be added here.
                </Card.Text>
                <Button variant="primary">Learn More</Button>
            </Card.Body>
        </Card>
    );
};

export default OrganizationCard;
}

src/components/organizationRow/OrganizationRow.tsx:
{
import React, { useState, useEffect } from 'react';
import { Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import GalleryCard from '../cards/galleryCard/GalleryCard';
import { Organization, Event, getPublicOrganizationEvents } from '../../context/OrgService';

interface OrganizationRowProps {
    organization: Organization;
}

const OrganizationRow: React.FC<OrganizationRowProps> = ({ organization }) => {
    const navigate = useNavigate();
    const [events, setEvents] = useState<Event[]>([]);
    const [displayedEvents, setDisplayedEvents] = useState<number>(3);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [expandedRow, setExpandedRow] = useState<boolean>(false);
    const orgId = organization.PK.split('#')[1];
    
    // Added state to track when logo URLs should be refreshed
    const [refreshCount, setRefreshCount] = useState<number>(0);

    useEffect(() => {
        const fetchEvents = async () => {
            try {
                setLoading(true);
                const response = await getPublicOrganizationEvents(orgId);
                
                if (response.data.events && response.data.events.length > 0) {
                    setEvents(response.data.events);
                }
                setLoading(false);
            } catch (err) {
                console.error(`Error fetching events for ${organization.name}:`, err);
                setError(`Currently no events for ${organization.name}`);
                setLoading(false);
            }
        };
        
        fetchEvents();
        
        // Set up a timer to trigger refreshing organization logo URL every 45 minutes
        // This is less than the typical 1-hour expiration time for presigned URLs
        const refreshInterval = setInterval(() => {
            setRefreshCount(prev => prev + 1);
        }, 45 * 60 * 1000); // 45 minutes in milliseconds
        
        // Cleanup the interval when component unmounts
        return () => clearInterval(refreshInterval);
    }, [organization, orgId]);

    const handleSeeMore = () => {
        setExpandedRow(true);
        setDisplayedEvents(events.length);
    };

    const handleSeeAll = () => {
        navigate(`/organizations/${orgId.toLowerCase()}`);
    };

    const eventsToDisplay = events.slice(0, displayedEvents);

    return (
        <div className="organization-row mb-4" key={`${organization.id}-${refreshCount}`}>
            <div
                className={`row-container ${expandedRow ? 'expanded' : ''}`}
                style={{
                    overflowX: 'auto',
                    display: 'flex',
                    gap: '15px',
                    paddingBottom: '10px',
                    whiteSpace: 'nowrap',
                    scrollbarWidth: 'thin',
                    msOverflowStyle: 'none',
                }}
            >
                {/* Organization Card */}
                <div style={{ minWidth: '350px', flexShrink: 0, display: 'inline-block' }}>
                    <GalleryCard
                        item={organization}
                        className="organization-card"
                        orgName={organization.name}
                    />
                </div>
                {/* Event Cards */}
                {loading ? (
                    <div>Loading events...</div>
                ) : error ? (
                    <div className="text-danger">{error}</div>
                ) : (
                    <>
                        {eventsToDisplay.map(event => (
                            <div
                                key={event.id}
                                style={{
                                    minWidth: '350px',
                                    flexShrink: 0,
                                    display: 'inline-block',
                                }}
                            >
                                <GalleryCard
                                    item={event}
                                    className="event"
                                    orgName={event.GSI2PK}
                                />
                            </div>
                        ))}
                        {!expandedRow && events.length > 3 && (
                            <div
                                style={{
                                    minWidth: '100px',
                                    display: 'inline-flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    flexShrink: 0,
                                }}
                            >
                                <Button className="p-1" variant="primary" onClick={handleSeeMore}>
                                    See more
                                </Button>
                            </div>
                        )}
                        {expandedRow && (
                            <div
                                style={{
                                    minWidth: '100px',
                                    display: 'inline-flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    flexShrink: 0,
                                }}
                            >
                                <Button className="p-1" variant="primary" onClick={handleSeeAll}>
                                    See All
                                </Button>
                            </div>
                        )}
                    </>
                )}
            </div>
        </div>
    );
};

export default OrganizationRow;}

src/components/PhotoCarousel/PhotoCarousel.tsx:
{
import React, { useState, useEffect, useContext } from 'react';
import { Carousel, Button, Spinner, OverlayTrigger, Tooltip, Container, Row, Col } from 'react-bootstrap';
import { ChevronLeft, ChevronRight, TagFill } from 'react-bootstrap-icons';
import { useNavigate, useParams } from 'react-router-dom';
import { Photo, getAllPhotos } from '../../context/PhotoService';
import AuthContext from '../../context/AuthContext';
import { getPhotoTags, TaggedUserWithDetails } from '../../context/PhotoTagService';
import { isMemberOfOrg } from '../../context/AuthService';

interface CustomPhotoCarouselProps {
    orgName: string;
    eventId: string;
    activeIndex: number;
    preferredSize?: 'small' | 'medium' | 'large';
    onIndexChange: (index: number) => void;
}

const CustomPhotoCarousel: React.FC<CustomPhotoCarouselProps> = ({
    orgName,
    eventId,
    activeIndex,
    preferredSize = 'medium',
    onIndexChange,
}) => {
  const navigate = useNavigate();
  const { user } = useContext(AuthContext);
  const [photos, setPhotos] = useState<Photo[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [taggedUsers, setTaggedUsers] = useState<Map<string, TaggedUserWithDetails[]>>(new Map());
  const [loadingTags, setLoadingTags] = useState<boolean>(false);
  const [userOrgRole, setUserOrgRole] = useState<string | null>(null);
  const [checkingRole, setCheckingRole] = useState<boolean>(true);
  
  // Check if user is admin of this organization
  useEffect(() => {
    const checkUserRole = async () => {
      if (user) {
        try {
          setCheckingRole(true);
          const response = await isMemberOfOrg(user.id, orgName);
          if (response && response.data && response.data.data && response.data.data.membership) {
            setUserOrgRole(response.data.data.membership.role);
          }
        } catch (err) {
          console.error('Error checking user role:', err);
          setUserOrgRole(null);
        } finally {
          setCheckingRole(false);
        }
      } else {
        setCheckingRole(false);
      }
    };
    
    checkUserRole();
  }, [user, orgName]);
  
  useEffect(() => {
    const fetchPhotos = async () => {
      try {
        setLoading(true);
        const response = await getAllPhotos(orgName, eventId);
        
        if (response.data.photos && response.data.photos.length > 0) {
          setPhotos(response.data.photos);
        } else {
          setError("No photos found for this event");
        }
      } catch (err) {
        console.error('Error fetching photos:', err);
        setError("Failed to load photos");
      } finally {
        setLoading(false);
      }
    };
    
    fetchPhotos();
  }, [orgName, eventId]);
  
  // Fetch tags for the current photo when activeIndex changes
  useEffect(() => {
    const fetchPhotoTags = async () => {
      if (photos.length > 0 && activeIndex >= 0 && activeIndex < photos.length) {
        const currentPhoto = photos[activeIndex];
        
        // Check if we already fetched tags for this photo
        if (!taggedUsers.has(currentPhoto.id)) {
          try {
            setLoadingTags(true);
            const response = await getPhotoTags(orgName, eventId, currentPhoto.id);
            
            if (response && response.data && response.data.tags) {
              setTaggedUsers(prev => new Map(prev).set(currentPhoto.id, response.data.tags));
            }
          } catch (err) {
            console.error('Error fetching photo tags:', err);
          } finally {
            setLoadingTags(false);
          }
        }
      }
    };
    
    fetchPhotoTags();
  }, [photos, activeIndex, orgName, eventId, taggedUsers]);
  
  const handleSelect = (selectedIndex: number) => {
    onIndexChange(selectedIndex);
  };
  
  // Navigate to the tag people page
  const handleTagPeople = () => {
    if (photos.length > 0 && activeIndex >= 0 && activeIndex < photos.length) {
      const currentPhoto = photos[activeIndex];
      navigate(`/organizations/${orgName}/events/${eventId}/photos/${currentPhoto.id}/tag`);
    }
  };
  
  // Calculate size based on preference
  const getCarouselSize = () => {
    switch (preferredSize) {
      case 'small':
        return { width: '100%', maxHeight: '400px', height: 'auto' };
      case 'large':
        return { width: '100%', maxHeight: '75vh', height: 'auto' };
      case 'medium':
      default:
        return { width: '100%', maxHeight: '600px', height: 'auto' };
    }
  };

  // Get the appropriate image URL based on available sizes - MODIFIED to cap at medium size
  const getImageUrl = (photo: Photo) => {
    // Check if photo has urls object with different sizes
    if (photo.urls) {
      // Always prioritize medium size if available
      if (photo.urls.medium) {
        return photo.urls.medium;
      }
      
      // If no medium size is available, use thumbnail as next option
      if (photo.urls.thumbnail) {
        return photo.urls.thumbnail;
      }
      
      // Only if neither medium nor thumbnail is available, fall back to original
      if (photo.urls.original) {
        return photo.urls.original;
      }
    }
    
    // If no urls object or no sizes in it, use the main url
    return photo.url;
  };
  
  // Custom carousel controls with white square backgrounds and rounded edges
  const customPrevIcon = (
    <div className="carousel-nav-button carousel-nav-prev">
      <ChevronLeft color="dark" size={36} />
    </div>
  );
  
  const customNextIcon = (
    <div className="carousel-nav-button carousel-nav-next">
      <ChevronRight color="dark" size={36} />
    </div>
  );
  
  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center" style={{ height: '400px' }}>
        <Spinner animation="border" variant="light" />
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="text-center text-white p-5">
        <p>{error}</p>
      </div>
    );
  }
  
  if (photos.length === 0) {
    return (
      <div className="text-center text-white p-5">
        <p>No photos available for this event</p>
      </div>
    );
  }
  
  // Get current photo and its tags
  const currentPhoto = photos[activeIndex];
  const currentPhotoTags = taggedUsers.get(currentPhoto.id) || [];
  
  // Only show tag button to admin users of this organization
  const showTagButton = !checkingRole && userOrgRole === 'ADMIN';
  
  return (
    <div className="photo-carousel-container">
      <style>
        {`
          .carousel-nav-button {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 80px;
            height: 80px;
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            opacity: 0.9;
            transition: opacity 0.2s ease;
            z-index: 1000;
          }
          
          .carousel-nav-button:hover {
            opacity: 1;
            cursor: pointer;
          }
          
          .carousel-nav-prev {
            position: absolute;
            left: 20px;
            top: 50%;
            transform: translateY(-50%);
          }
          
          .carousel-nav-next {
            position: absolute;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
          }
          
          .carousel-control-prev,
          .carousel-control-next {
            opacity: 1;
            width: 10%;
          }
          
          .carousel-control-prev-icon,
          .carousel-control-next-icon {
            display: none;
          }
          
          /* Add some vertical padding to the carousel container */
          .photo-carousel-container {
            padding-top: 20px;
            padding-bottom: 20px;
            position: relative;
          }
          
          /* Center the carousel in the available space */
          .carousel {
            margin: 0 auto;
          }

          /* Style for the caption container */
          .photo-caption-container {
            margin-top: 20px;
            text-align: center;
            padding: 15px;
            position: relative;
          }
          
          /* Style for tagged users */
          .tagged-users-container {
            margin-top: 10px;
            text-align: center;
          }
          
          .tagged-user-pill {
            display: inline-block;
            padding: 4px 10px;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 20px;
            margin: 4px;
            font-size: 14px;
          }
          
          /* Tag button styling for inline with caption */
          .tag-button-inline {
            margin-left: 12px;
            padding: 3px 10px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            background-color: rgba(220, 53, 69, 0.7);
            border: none;
            border-radius: 4px;
            color: white;
            transition: all 0.2s ease;
          }
          
          .tag-button-inline:hover {
            background-color: rgba(220, 53, 69, 0.9);
          }
          
          .tag-button-icon {
            margin-right: 4px;
          }
          
          .image-container {
            position: relative;
          }
          
          .caption-row {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-wrap: wrap;
          }
        `}
      </style>
      
      <Carousel
        activeIndex={activeIndex}
        onSelect={handleSelect}
        interval={null}
        indicators={false}
        prevIcon={customPrevIcon}
        nextIcon={customNextIcon}
        className="bg-dark position-relative"
      >
        {photos.map((photo, index) => (
          <Carousel.Item key={photo.id}>
            {/* Image container with relative positioning */}
            <div className="d-flex justify-content-center align-items-center" style={getCarouselSize()}>
              <img
                src={getImageUrl(photo)}
                alt={photo.metadata?.title || `Photo ${index + 1}`}
                style={{ maxHeight: '100%', maxWidth: '100%', objectFit: 'contain' }}
              />
            </div>
          </Carousel.Item>
        ))}
      </Carousel>

      {/* Caption container outside the carousel */}
      {photos.length > 0 && activeIndex < photos.length && (
        <div className="photo-caption-container text-white">
          <div className="caption-row">
            <span className="fw-bold">
              {currentPhoto.metadata?.title || `Photo ${activeIndex + 1}`}
            </span>
            
            {currentPhoto.metadata?.description && (
              <>
                <span className="mx-2">-</span>
                <span>{currentPhoto.metadata.description}</span>
              </>
            )}
            
            {/* Tag button inline with caption */}
            {showTagButton && (
              <OverlayTrigger
                placement="top"
                overlay={<Tooltip id="tag-tooltip">Tag people in this photo</Tooltip>}
              >
                <Button
                  className="tag-button-inline ms-3"
                  onClick={handleTagPeople}
                  aria-label="Tag people in this photo"
                  size="sm"
                >
                  <TagFill size={16} className="tag-button-icon" />
                  Tag People
                </Button>
              </OverlayTrigger>
            )}
          </div>
          
          {/* Show tagged users */}
          {loadingTags ? (
            <div className="d-flex justify-content-center mt-2">
              <Spinner animation="border" variant="light" size="sm" />
            </div>
          ) : currentPhotoTags.length > 0 ? (
            <div className="tagged-users-container mt-2">
              <small className="d-block mb-1">People in this photo:</small>
              {currentPhotoTags.map(taggedUser => (
                <span key={taggedUser.tag.id} className="tagged-user-pill">
                  {taggedUser.user.firstName} {taggedUser.user.lastName}
                </span>
              ))}
            </div>
          ) : null}
        </div>
      )}
    </div>
  );
};

export default CustomPhotoCarousel;
}

src/components/routes/ProtectedRoute/ProtectedRoute.tsx:
{
import { JSX, useContext } from 'react';
import { Navigate } from 'react-router-dom';
import AuthContext from '../../../context/AuthContext';

interface ProtectedRouteProps {
    children: JSX.Element;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
    const authContext = useContext(AuthContext);

    if (!authContext || !authContext.token) {
        const storedToken = localStorage.getItem('token');
        if (!storedToken) {
            return <Navigate to="/login" replace />;
        }
        console.log('Token found in localStorage but not in context');
    }
    return children;
};

export default ProtectedRoute;
}

src/components/routes/ProtectedRoute.tsx:
{
import { JSX, useContext } from 'react';
import { Navigate } from 'react-router-dom';
import AuthContext from '../../context/AuthContext';

interface ProtectedRouteProps {
    children: JSX.Element;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
    const authContext = useContext(AuthContext);

    if (!authContext?.token) {
        // Redirect to login if there is no token
        return <Navigate to="/login" replace />;
    }

    return children;
};

export default ProtectedRoute;
}

src/context/AuthContext.tsx:
{
import { createContext } from 'react';

export interface User {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
    role: string;
}

export interface AuthContextType {
    user: User | null;
    token: string | null;
    setUser: (user: User | null) => void;
    setToken: (token: string | null) => void;
    logout: () => void;
}

// Create a default value for the context to avoid null checks
const defaultContext: AuthContextType = {
    user: null,
    token: null,
    setUser: () => {},
    setToken: () => {},
    logout: () => {},
};

const AuthContext = createContext<AuthContextType>(defaultContext);

export default AuthContext;
}

src/context/AuthProvider.tsx:
{
import { useState, useEffect, ReactNode } from 'react';
import AuthContext, { User } from './AuthContext';

const AuthProvider = ({ children }: { children: ReactNode }) => {
    const [user, setUser] = useState<User | null>(null);
    const [token, setToken] = useState<string | null>(null);
    const [isInitialized, setIsInitialized] = useState(false);

    useEffect(() => {
        const initializeAuth = () => {
            const storedUser = localStorage.getItem('user');
            const storedToken = localStorage.getItem('token');

            if (storedUser && storedToken) {
                try {
                    setUser(JSON.parse(storedUser));
                    setToken(storedToken);
                } catch (error) {
                    console.error('Error parsing stored user data:', error);
                    localStorage.removeItem('user');
                    localStorage.removeItem('token');
                }
            }

            setIsInitialized(true);
        };

        initializeAuth();
    }, []);

    const updateUser = (newUser: User | null) => {
        setUser(newUser);
        if (newUser) {
            localStorage.setItem('user', JSON.stringify(newUser));
        } else {
            localStorage.removeItem('user');
        }
    };

    const updateToken = (newToken: string | null) => {
        setToken(newToken);
        if (newToken) {
            localStorage.setItem('token', newToken);
        } else {
            localStorage.removeItem('token');
        }
    };

    const logout = () => {
        setUser(null);
        setToken(null);
        localStorage.removeItem('user');
        localStorage.removeItem('token');
    };

    if (!isInitialized) {
        // TODO: Add some loading state (?)
        return null;
    }

    return (
        <AuthContext.Provider
            value={{
                user,
                token,
                setUser: updateUser,
                setToken: updateToken,
                logout,
            }}
        >
            {children}
        </AuthContext.Provider>
    );
};

export default AuthProvider;
}

src/context/AuthService.tsx:
{
import axiosInstance, { noAuthInstance } from '../utils/axios';

export const registerUser = async (data: {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
}) => {
    return noAuthInstance.post('/api/auth/register', data);
};

export const loginUser = async (data: { email: string; password: string }) => {
    return noAuthInstance.post('/api/auth/login', data);
};

/**
 * Change user password
 * @param currentPassword Current password for verification
 * @param newPassword New password to set
 * @returns Promise with success response
 */
export const changePassword = async (currentPassword: string, newPassword: string) => {
    return axiosInstance.patch('/api/auth/password', {
        currentPassword,
        newPassword,
    });
};

/**
 * Delete user account
 * @param userId User ID to delete
 * @returns Promise with success response
 */
export const deleteAccount = async (userId: string) => {
    return axiosInstance.delete(`/api/auth/users/${userId}`);
};

export interface UserOrgRelationship {
    GSI1PK: string;
    joinedAt: string;
    role: string;
    updatedAt: string;
    userId: string;
    SK: string;
    GSI1SK: string;
    PK: string;
    organizationName: string;
    type: string;
}

export const isMemberOfOrg = async (
    userId: string,
    orgId: string
): Promise<{ status: string; data: { data: { membership: UserOrgRelationship } } }> => {
    return axiosInstance.get(`/users/${userId}/members/${orgId}`);
};
}

src/context/EventService.tsx:
{
import axiosInstance, { noAuthInstance } from '../utils/axios';

export interface EventUser {
    PK: string; // USER#<ID>
    SK: string; // EVENT#<ID>

    id: string;

    // GSI attributes
    GSI2PK: string; // EVENT#<ID>
    GSI2SK: string; // USER#<ID>
}

export interface EventUserResponse {
    status: string;
    data: {
        userEvent: EventUser;
    };
}

export interface attendeesResponse {
    status: string;
    data: {
        attendees: string[]; // Array of user IDs from a format like 'USER#userId'
    };
}

/**
 * Attend an event - creates an attendance record
 * @param orgId Organization ID
 * @param eventId Event ID
 * @returns Response with created attendance record
 */
export const attendEvent = async (orgId: string, eventId: string) => {
    try {
        const response = await axiosInstance.post<EventUserResponse>(
            `/organizations/${orgId}/events/${eventId}`
        );
        console.log('Attend event response:', response.data);
        return response.data;
    } catch (error) {
        console.error('Error attending event:', error);
        throw error;
    }
};

/**
 * Get all attendees for an event
 * @param orgId Organization ID
 * @param eventId Event ID
 * @returns Array of user IDs for attendees
 */
export const getEventAttendees = async (orgId: string, eventId: string): Promise<string[]> => {
    try {
        // Try using the proper endpoint first
        try {
            console.log(`Fetching attendees for event ${eventId} in org ${orgId}`);
            const response = await axiosInstance.get<attendeesResponse>(
                `/organizations/${orgId}/events/${eventId}`
            );
            
            console.log('Event attendees response:', response.data);
            
            // Check different possible response formats
            if (response.data && response.data.data && Array.isArray(response.data.data.attendees)) {
                return response.data.data.attendees;
            }
        } catch (error) {
            console.warn('Error using primary attendees endpoint, trying fallback:', error);
        }
        
        // Fallback: try to get event users from the event itself
        const eventResponse = await axiosInstance.get(
            `/organizations/${orgId}/events/${eventId}/users`
        );
        
        // Try to extract event users from different possible response structures
        if (eventResponse.data && eventResponse.data.data && eventResponse.data.data.users) {
            return eventResponse.data.data.users.map((user: any) => {
                if (typeof user === 'string') return user;
                if (user.userId) return user.userId;
                if (user.id) return user.id;
                return '';
            }).filter(Boolean);
        }
        
        // Last resort: If we can't find attendees through any API, try to get them from GSIs
        const indexResponse = await axiosInstance.get(
            `/organizations/${orgId}/events/${eventId}/gsi`
        );
        
        if (indexResponse.data && indexResponse.data.items) {
            return indexResponse.data.items
                .filter((item: any) => item.PK && item.PK.startsWith('USER#'))
                .map((item: any) => item.PK);
        }
        
        // If everything fails, return empty array
        console.warn('No attendees found for this event using any endpoint');
        return [];
    } catch (error) {
        console.error('Error fetching event attendees:', error);
        return []; // Return empty array on error
    }
};}

src/context/MemberService.tsx:
{
import axiosInstance from '../utils/axios';
import { Member } from '../components/cards/memberCard/MemberCard';

export interface MemberResponse {
    status: string;
    data: {
        members: Member[];
    };
}

export enum Role {
    Admin = 'ADMIN',
    Member = 'MEMBER',
}

export const getOrganizationMembers = async (organizationId: string) => {
    try {
        const response = await axiosInstance.get<MemberResponse>(
            `/organizations/${organizationId}/members`
        );
        return response.data;
    } catch (error) {
        console.error(`Error fetching members for organization ${organizationId}:`, error);
        throw error;
    }
};

export const updateMember = async (organizationId: string, memberId: string, role: Role) => {
    try {
        const response = await axiosInstance.patch(
            `/organizations/${organizationId}/members/${memberId}`,
            {
                role: role,
            }
        );
        return response.data;
    } catch (error) {
        console.error(`Error promoting member ${memberId}:`, error);
        throw error;
    }
};

export const removeMember = async (organizationId: string, memberId: string) => {
    try {
        const response = await axiosInstance.delete(
            `/organizations/${organizationId}/members/${memberId}`
        );
        return response.data;
    } catch (error) {
        console.error(`Error removing member ${memberId}:`, error);
        throw error;
    }
};
}

src/context/MembershipService.tsx:
{
import axiosInstance from '../utils/axios';
import { MembershipRequest } from '../components/cards/membershipCard/MembershipCard';

interface MembershipResponse {
    status: string;
    data: {
        requests: MembershipRequest[];
    };
}

interface ApplicationResponse {
    status: string;
    message: string;
    data: {
        request: MembershipRequest;
    };
}

export const getOrganizationMembershipRequests = async (organizationId: string) => {
    try {
        const response = await axiosInstance.get<MembershipResponse>(
            `/organizations/${organizationId}/requests`
        );
        return response.data;
    } catch (error) {
        console.error(
            `Error fetching membership requests for organization ${organizationId}:`,
            error
        );
        throw error;
    }
};

export const acceptMembershipRequest = async (organizationId: string, requestId: string) => {
    try {
        const response = await axiosInstance.put(
            `/organizations/${organizationId}/requests/${requestId}`
        );
        return response.data;
    } catch (error) {
        console.error(`Error accepting membership request ${requestId}:`, error);
        throw error;
    }
};

export const denyMembershipRequest = async (organizationId: string, requestId: string) => {
    try {
        const response = await axiosInstance.delete(
            `/organizations/${organizationId}/requests/${requestId}`
        );
        return response.data;
    } catch (error) {
        console.error(`Error denying membership request ${requestId}:`, error);
        throw error;
    }
};

export const sendJoinRequest = async (organizationId: string, message: string) => {
    try {
        const response = await axiosInstance.post<ApplicationResponse>(
            `/organizations/${organizationId}`,
            {
                message,
            }
        );
        return response.data;
    } catch (error) {
        console.error(
            `Error fetching membership requests for organization ${organizationId}:`,
            error
        );
        throw error;
    }
};
}

src/context/OrgService.tsx:
{
import axiosInstance, { noAuthInstance } from '../utils/axios';

export interface Organization {
    id: string;
    name: string;
    description?: string;
    logoUrl?: string;
    PK: string;
    isPublic: boolean;
    createdAt: string;
    updatedAt: string;
    GSI1PK: string;
    GSI1SK: string;
    SK: string;
    createdBy: string;
    type: string;
    contactEmail?: string;
    website?: string;
}

export interface OrganizationsResponse {
    message: string;
    data: {
        organizations: Organization[];
    };
    lastEvaluatedKey: string | null;
}

interface Weather {
    temperature: number;
    weatherCode: number;
    weatherDescription: string;
    windSpeed: number;
    precipitation: number;
}
interface GeoCode {
    providedAddress: string;
    resolvedCoordinates: {
        latitude: number;
        longitude: number;
        formattedAddress: string;
    };
}
interface ILocation {
    latitude: number;
    longitude: number;
    name: string;
}

export interface Event {
    id: string;
    title: string;
    description?: string;
    GSI2PK: string;
    GSI2SK: string;
    PK: string;
    SK: string;
    date: string;
    isPublic: boolean;
    createdAt: string;
    updatedAt: string;
    imageUrl?: string;
    location?: ILocation | string;
    weather?: Weather;
}
export interface EventResponse {
    status: string;
    data: {
        event: Event;
        geocoding?: GeoCode;
    };
    lastEvaluatedKey: string | null;
}

export interface EventsResponse {
    status: string;
    data: {
        events: Event[];
    };
    lastEvaluatedKey: string | null;
}

export interface DeleteEventResponse {
    status: string;
    message: string;
}

export const getPublicOrganizations = async (lastEvaluatedKey?: string, limit: number = 9) => {
    try {
        const response = await noAuthInstance.get<OrganizationsResponse>('/guests', {
            params: {
                lastEvaluatedKey: lastEvaluatedKey ? JSON.stringify(lastEvaluatedKey) : undefined,
                limit,
            },
        });
        return response.data;
    } catch (error) {
        console.error('Error fetching public organizations:', error);
        throw error;
    }
};

// Get public events for an organization
export const getPublicOrganizationEvents = async (
    organizationId: string,
    lastEvaluatedKey?: string,
    limit: number = 9
) => {
    try {
        const response = await noAuthInstance.get<EventsResponse>(
            `/guests/organizations/${organizationId}/events`,
            {
                params: {
                    lastEvaluatedKey: lastEvaluatedKey
                        ? JSON.stringify(lastEvaluatedKey)
                        : undefined,
                    limit,
                },
            }
        );
        return response.data;
    } catch (error) {
        console.error(`Error fetching events for organization ${organizationId}:`, error);
        throw error;
    }
};

// Create a new organization
export const createOrganization = async (formData: FormData) => {
    try {
        const response = await axiosInstance.post('/organizations', formData, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
        });
        return response.data;
    } catch (error) {
        console.error('Error creating organization:', error);
        throw error;
    }
};

// Create a new event for an organization
export const createEvent = async (
    orgId: string,
    eventData: { title: string; description: string; date: string; location: string }
) => {
    try {
        const response = await axiosInstance.post(`/organizations/${orgId}/events`, eventData, {
            headers: {
                'Content-Type': 'application/json',
            },
        });
        return response.data;
    } catch (error) {
        console.error(`Error creating event for organization ${orgId}:`, error);
        throw error;
    }
};

// Update an existing organization
export const updateOrganization = async (organizationId: string, formData: FormData) => {
    try {
        const response = await axiosInstance.patch(`/organizations/${organizationId}`, formData, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
        });
        return response.data;
    } catch (error) {
        console.error(`Error updating organization ${organizationId}:`, error);
        throw error;
    }
};

// Delete an organization
export const deleteOrganization = async (organizationId: string) => {
    try {
        const response = await axiosInstance.delete(`/organizations/${organizationId}`);
        return response.data;
    } catch (error) {
        console.error(`Error deleting organization ${organizationId}:`, error);
        throw error;
    }
};

// Get events for an organization (for authenticated users)
export const getOrganizationEvents = async (orgId: string) => {
    try {
        const response = await axiosInstance.get<EventsResponse>(`/organizations/${orgId}/events`);
        console.log(response);
        return response.data;
    } catch (error) {
        console.error('Error fetching organization events:', error);
        throw error;
    }
};

// change event publicity
export const changeEventPublicity = async (orgId: string, eventId: string) => {
    try {
        const response = await axiosInstance.patch<EventResponse>(
            `/organizations/${orgId}/events/${eventId}`
        );
        return response.data;
    } catch (error) {
        console.error('Error fetching organization events:', error);
        throw error;
    }
};

// Get user's own organizations
export const getUserOrganizations = async () => {
    try {
        const response = await axiosInstance.get('/organizations');
        return response.data;
    } catch (error) {
        console.error('Error fetching user organizations:', error);
        throw error;
    }
};

// Get weather data for the event
export const getWeather = async (location: string, id: string, eid: string) => {
    try {
        const response = await axiosInstance.patch<EventResponse>(
            `/organizations/${id}/events/${eid}/location/address`,
            {
                address: location,
            }
        );
        return response.data;
    } catch (error) {
        console.error('Error fetching weather information', error);
        throw error;
    }
};

// Get weather data for the event
export const getUpdateWeather = async (id: string, eid: string) => {
    try {
        const response = await axiosInstance.post<EventResponse>(
            `/organizations/${id}/events/${eid}/weather/refresh`
        );
        return response.data;
    } catch (error) {
        console.error('Error fetching weather information', error);
        throw error;
    }
};

export const deleteEvent = async (id: string, eid: string) => {
    try {
        const response = await axiosInstance.delete<DeleteEventResponse>(
            `/organizations/${id}/events/${eid}/admin`
        );
        return response.data;
    } catch (error) {
        console.error('Error fetching weather information', error);
        throw error;
    }
};
}

src/context/PhotoService.tsx:
{
import axiosInstance from '../utils/axios';

export interface Photo {
    PK: string;
    SK: string;
    id: string;
    eventId: string;
    url: string;
    urls?: {
        original?: string;
        thumbnail?: string;
        medium?: string;
        large?: string;
    };
    createdAt: string;
    updatedAt: string;
    uploadedBy: string;
    metadata?: {
        title?: string;
        description?: string;
        size?: number;
        width?: number;
        height?: number;
        mimeType?: string;
        s3Key?: string;
    };
    GSI2PK: string;
    GSI2SK: string;
}

export interface PhotosResponse {
    status: string;
    data: {
        photos: Photo[];
    };
}

export interface PhotoUploadResponse {
    status: string;
    data: {
        photo?: Photo;
        photos?: Photo[];
    };
}

/**
 * Gets all photos for an event
 * @param orgName The organization name
 * @param eventId The ID of the event
 * @returns Promise with the response data
 */
export const getAllPhotos = async (orgName: string, eventId: string): Promise<PhotosResponse> => {
    try {
        const response = await axiosInstance.get<PhotosResponse>(
            `/organizations/${orgName}/events/${eventId}/photos`
        );
        return response.data;
    } catch (error) {
        console.error('Error fetching photos of an event:', error);
        throw error;
    }
};

/**
 * Uploads a photo or multiple photos to an event
 * @param orgId The organization ID
 * @param eventId The ID of the event
 * @param formData FormData containing the photo file(s) and metadata
 * @param isMultiple Whether this is a multiple file upload
 * @param onProgress Optional callback for tracking upload progress
 * @returns Promise with the response data
 */
export const uploadEventPhoto = async (
    orgId: string,
    eventId: string,
    formData: FormData,
    isMultiple: boolean = false,
    onProgress?: (progress: number) => void
): Promise<PhotoUploadResponse> => {
    try {
        // Add query parameter for multiple files if needed
        const endpoint = isMultiple 
            ? `/organizations/${orgId}/events/${eventId}/photos?multiple=true`
            : `/organizations/${orgId}/events/${eventId}/photos`;
            
        const response = await axiosInstance.post<PhotoUploadResponse>(
            endpoint,
            formData,
            {
                headers: {
                    'Content-Type': 'multipart/form-data',
                },
                onUploadProgress: (progressEvent) => {
                    if (onProgress && progressEvent.total) {
                        const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
                        onProgress(percentCompleted);
                    }
                }
            }
        );
        return response.data;
    } catch (error) {
        console.error('Error uploading photo(s) to event:', error);
        throw error;
    }
};

/**
 * Gets a download URL for a specific photo
 * @param orgId The organization ID
 * @param eventId The ID of the event
 * @param photoId The ID of the photo
 * @param size The desired photo size
 * @returns Promise with the response data
 */
export const getPhotoDownloadUrl = async (
    orgId: string,
    eventId: string,
    photoId: string,
    size: 'thumbnail' | 'medium' | 'large' | 'original' = 'original'
): Promise<{ status: string; data: { downloadUrl: string; size: string } }> => {
    try {
        const response = await axiosInstance.get(
            `/organizations/${orgId}/events/${eventId}/photos/${photoId}/download`,
            { params: { size } }
        );
        return response.data;
    } catch (error) {
        console.error('Error getting photo download URL:', error);
        throw error;
    }
};


/**
 * Delete a photo from an event
 * @param orgId The organization ID
 * @param eventId The ID of the event
 * @param photoId The ID of the photo to delete
 * @returns Promise with the response data
 */
export const deletePhoto = async (
    orgId: string,
    eventId: string,
    photoId: string
): Promise<{status: string, message: string}> => {
    try {
        const response = await axiosInstance.delete(
            `/organizations/${orgId}/events/${eventId}/photos/${photoId}`
        );
        return response.data;
    } catch (error) {
        console.error('Error deleting photo:', error);
        throw error;
    }
};

}

src/context/PhotoTagService.tsx:
{
import axiosInstance from '../utils/axios';

// Define interfaces for the tag data
export interface TaggedUser {
  id: string;
  userId: string;
  photoId: string;
  eventId: string;
  taggedBy: string;
  taggedAt: string;
}

export interface TaggedUserWithDetails {
  tag: TaggedUser;
  user: {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
  };
}

export interface TagResponse {
  status: string;
  data: {
    tags: TaggedUser[];
  };
}

/**
 * Get all users tagged in a photo
 * @param orgId The organization ID
 * @param eventId The event ID
 * @param photoId The photo ID
 * @returns Promise with tagged users data
 */
export const getPhotoTags = async (
  orgId: string,
  eventId: string,
  photoId: string
): Promise<{ status: string; data: { tags: TaggedUserWithDetails[] } }> => {
  try {
    const response = await axiosInstance.get(
      `/organizations/${orgId}/events/${eventId}/photos/${photoId}/tags`
    );
    return response.data;
  } catch (error) {
    console.error('Error fetching photo tags:', error);
    throw error;
  }
};

/**
 * Tag multiple users in a photo
 * @param orgId The organization ID
 * @param eventId The event ID
 * @param photoId The photo ID
 * @param userIds Array of user IDs to tag
 * @returns Promise with created tags
 */
export const tagUsersInPhoto = async (
  orgId: string,
  eventId: string,
  photoId: string,
  userIds: string[]
): Promise<TagResponse> => {
  try {
    const response = await axiosInstance.post(
      `/organizations/${orgId}/events/${eventId}/photos/${photoId}/tags`,
      { userIds }
    );
    return response.data;
  } catch (error) {
    console.error('Error tagging users in photo:', error);
    throw error;
  }
};

/**
 * Remove a tag (untag a user from a photo)
 * @param orgId The organization ID
 * @param eventId The event ID
 * @param photoId The photo ID
 * @param userId The user ID to untag
 * @returns Promise with success response
 */
export const removeTagFromPhoto = async (
  orgId: string,
  eventId: string,
  photoId: string,
  userId: string
): Promise<{ status: string; message: string }> => {
  try {
    const response = await axiosInstance.delete(
      `/organizations/${orgId}/events/${eventId}/photos/${photoId}/tags/${userId}`
    );
    return response.data;
  } catch (error) {
    console.error('Error removing tag from photo:', error);
    throw error;
  }
};

/**
 * Get all photos a user is tagged in
 * @param userId The user ID
 * @returns Promise with tagged photos
 */
export const getUserTaggedPhotos = async (
  userId: string
): Promise<{ status: string; data: { photos: any[]; count: number } }> => {
  try {
    const response = await axiosInstance.get(`/users/${userId}/tagged-photos`);
    return response.data;
  } catch (error) {
    console.error('Error fetching user tagged photos:', error);
    throw error;
  }
};

export default {
  getPhotoTags,
  tagUsersInPhoto,
  removeTagFromPhoto,
  getUserTaggedPhotos
};}

src/main.tsx:
{
import 'bootstrap/dist/css/bootstrap.css';
import 'bootstrap-icons/font/bootstrap-icons.css';
import './styles/global.css';
import './styles/footer.css';
import './styles/auth.css';
import './styles/organizationRow.css';
import './styles/galleryCard.css';
import './styles/SideBar.css';
import './styles/layout.css';
import './styles/navBarButton.css';
import './styles/accountSettings.css';
import './styles/createOrganization.css';
import './styles/membership.css';
import './styles/member.css';
import './styles/photoTagging.css';

import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';

import AuthProvider from './context/AuthProvider';

createRoot(document.getElementById('root')!).render(
    <StrictMode>
        <BrowserRouter>
            <AuthProvider>
                <App />
            </AuthProvider>
        </BrowserRouter>
    </StrictMode>
);
}

src/pages/AccountSettings/AccountSettings.tsx:
{
import React, { useState, useContext } from 'react';
import { Container, Row, Col, Form, Button, InputGroup } from 'react-bootstrap';
import { ArrowLeft, BoxArrowRight } from 'react-bootstrap-icons';
import { useNavigate, NavLink } from 'react-router-dom';
import AuthContext from '../../context/AuthContext';
import NavButton from '../../components/navButton/NavButton';
import FormInput from '../../components/forms/FormInput/FormInput';
import { changePassword, deleteAccount } from '../../context/AuthService';

interface AccountSettingsProps {
    className?: string;
}

const AccountSettings: React.FC<AccountSettingsProps> = ({ className = '' }) => {
    const navigate = useNavigate();
    const { user, logout } = useContext(AuthContext);

    // Form states
    const [currentPassword, setCurrentPassword] = useState('');
    const [newPassword, setNewPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [deleteConfirmation, setDeleteConfirmation] = useState('');
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);

    // Handle password change
    const handlePasswordChange = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();

        // Validation
        if (!currentPassword) {
            setError('Current password is required');
            return;
        }

        if (!newPassword) {
            setError('New password is required');
            return;
        }

        if (newPassword !== confirmPassword) {
            setError('New passwords do not match');
            return;
        }

        if (newPassword.length < 8) {
            setError('Password must be at least 8 characters long');
            return;
        }

        setError(null);
        setIsLoading(true);

        try {
            // Call the API to change password
            await changePassword(currentPassword, newPassword);

            // Set success message and reset form
            setSuccess('Password successfully updated');

            // Reset form
            setCurrentPassword('');
            setNewPassword('');
            setConfirmPassword('');
        } catch (err: any) {
            console.error('Failed to update password:', err);
            // Check if the error has a specific message about incorrect password
            if (err.response && err.response.data && err.response.data.message) {
                setError(err.response.data.message);
            } else {
                setError('Failed to update password. Please try again.');
            }
        } finally {
            setIsLoading(false);
        }
    };

    // Handle account deletion
    const handleDeleteAccount = async () => {
        if (deleteConfirmation !== 'Delete') {
            setError('Please type "Delete" to confirm account deletion');
            return;
        }

        setError(null);
        setIsLoading(true);

        try {
            // Call the API to delete account
            if (user && user.id) {
                await deleteAccount(user.id);

                // Log out and redirect
                logout();
                navigate('/login');
            } else {
                throw new Error('User ID not found');
            }
        } catch (err: any) {
            console.error('Failed to delete account:', err);
            // Check if the error has a specific message
            if (err.response && err.response.data && err.response.data.message) {
                setError(err.response.data.message);
            } else {
                setError('Failed to delete account. Please try again.');
            }
        } finally {
            setIsLoading(false);
        }
    };

    // Cancel changes
    const handleCancel = () => {
        setCurrentPassword('');
        setNewPassword('');
        setConfirmPassword('');
        setDeleteConfirmation('');
        setError(null);
        setSuccess(null);
    };

    return (
        <div className={`account-settings bg-dark text-light min-vh-100 ${className}`}>
            {/* Header - No border */}
            <div className="py-3">
                <Container fluid>
                    <Row className="align-items-center">
                        <Col xs={3} className="d-flex align-items-center">
                            <NavLink to="/" className="text-light text-decoration-none">
                                <ArrowLeft className="me-2" />
                                Back to Home
                            </NavLink>
                        </Col>
                        <Col xs={6} className="text-center">
                            <h2 className="mb-0">Account Settings</h2>
                        </Col>
                        <Col xs={3} className="text-end">
                            <NavLink to="/logout" className="text-light">
                                <BoxArrowRight size={24} />
                            </NavLink>
                        </Col>
                    </Row>
                </Container>
            </div>

            {/* Main Content */}
            <Container fluid className="py-3">
                {/* Account Info Section */}
                <Row className="justify-content-center mb-5">
                    <Col xs={12} md={8} lg={6}>
                        <h3 className="text-center mb-3">Personal Information</h3>

                        {/* Display user information */}
                        <div className="user-info mb-5">
                            <p className="text-center mb-3" style={{ fontSize: '1.50rem' }}>
                                Account name: {user?.firstName} {user?.lastName}
                            </p>
                            <p className="text-center mb-3" style={{ fontSize: '1.50rem' }}>
                                Account Email: {user?.email}
                            </p>
                            <p className="text-center mb-5" style={{ fontSize: '1.50rem' }}>
                                Account Type:{' '}
                                {user?.role
                                    ? user.role.charAt(0).toUpperCase() +
                                      user.role.slice(1).toLowerCase()
                                    : 'User'}
                            </p>
                        </div>

                        {/* Combined form for both password change and delete account to avoid separation */}
                        <div className="account-actions">
                            {error && (
                                <div className="alert alert-danger" role="alert">
                                    {error}
                                </div>
                            )}

                            {success && (
                                <div className="alert alert-success" role="alert">
                                    {success}
                                </div>
                            )}

                            {/* Password change section */}
                            <div className="password-change mb-5">
                                <Form.Group className="mb-4" controlId="currentPassword">
                                    <Form.Label>Current Password:</Form.Label>
                                    <Form.Control
                                        type="password"
                                        placeholder="Enter current password"
                                        value={currentPassword}
                                        onChange={e => setCurrentPassword(e.target.value)}
                                        className="bg-white text-dark border-secondary"
                                    />
                                </Form.Group>

                                <Form.Group className="mb-4" controlId="newPassword">
                                    <Form.Label>New Password:</Form.Label>
                                    <Form.Control
                                        type="password"
                                        placeholder="Enter new password"
                                        value={newPassword}
                                        onChange={e => setNewPassword(e.target.value)}
                                        className="bg-white text-dark border-secondary"
                                    />
                                </Form.Group>

                                <Form.Group className="mb-4" controlId="confirmPassword">
                                    <Form.Label>Confirm Password:</Form.Label>
                                    <Form.Control
                                        type="password"
                                        placeholder="Confirm new password"
                                        value={confirmPassword}
                                        onChange={e => setConfirmPassword(e.target.value)}
                                        className="bg-white text-dark border-secondary"
                                    />
                                </Form.Group>

                                {/* Password change buttons */}
                                <div className="d-flex justify-content-between mb-5">
                                    <Button
                                        variant="secondary"
                                        onClick={handleCancel}
                                        disabled={isLoading}
                                        style={{
                                            minWidth: '160px',
                                            height: '35px',
                                            fontSize: '14px',
                                            whiteSpace: 'nowrap',
                                            paddingLeft: '8px',
                                            paddingRight: '8px',
                                            marginLeft: '-50px', // Move button LEFT by 50px
                                        }}
                                    >
                                        Cancel
                                    </Button>
                                    <Button
                                        variant="secondary"
                                        onClick={e => {
                                            e.preventDefault();
                                            handlePasswordChange(e as any);
                                        }}
                                        disabled={isLoading}
                                        style={{
                                            minWidth: '160px',
                                            height: '35px',
                                            fontSize: '14px',
                                            whiteSpace: 'nowrap',
                                            paddingLeft: '8px',
                                            paddingRight: '8px',
                                            marginRight: '-50px', // Move button RIGHT by 50px
                                        }}
                                    >
                                        {isLoading ? 'Processing...' : 'Save Changes'}
                                    </Button>
                                </div>
                            </div>

                            {/* Delete Account Section - No border or margin that would create a line, with space between heading and content */}
                            <div
                                className="delete-section"
                                style={{ borderTop: 'none', marginTop: '-20px' }}
                            >
                                <h4 className="text-center mb-4 fs-5">Delete Account?</h4>

                                {/* For medium screens and up - inline display */}
                                <div className="d-none d-md-flex align-items-center justify-content-center">
                                    <Form.Label htmlFor="deleteConfirmation" className="me-3 mb-0">
                                        Type "Delete" to confirm:
                                    </Form.Label>
                                    <Form.Control
                                        id="deleteConfirmation"
                                        type="text"
                                        placeholder="Type 'Delete'"
                                        value={deleteConfirmation}
                                        onChange={e => setDeleteConfirmation(e.target.value)}
                                        className="bg-white text-dark border-secondary me-3"
                                        style={{ width: '150px' }}
                                    />
                                    <Button
                                        variant="danger"
                                        onClick={handleDeleteAccount}
                                        disabled={deleteConfirmation !== 'Delete' || isLoading}
                                        className="px-3 py-1"
                                        size="sm"
                                    >
                                        {isLoading ? 'Processing...' : 'Delete Account'}
                                    </Button>
                                </div>

                                {/* For small screens - stacked display with smaller text */}
                                <div className="d-flex d-md-none flex-column align-items-center">
                                    <Form.Label
                                        htmlFor="deleteConfirmationMobile"
                                        className="mb-1 small"
                                    >
                                        Type "Delete" to confirm:
                                    </Form.Label>
                                    <div className="d-flex mb-2 align-items-center">
                                        <Form.Control
                                            id="deleteConfirmationMobile"
                                            type="text"
                                            placeholder="Type 'Delete'"
                                            value={deleteConfirmation}
                                            onChange={e => setDeleteConfirmation(e.target.value)}
                                            className="bg-white text-dark border-secondary me-2"
                                            style={{ width: '120px' }}
                                            size="sm"
                                        />
                                        <Button
                                            variant="danger"
                                            onClick={handleDeleteAccount}
                                            disabled={deleteConfirmation !== 'Delete' || isLoading}
                                            className="px-2 py-1"
                                            size="sm"
                                        >
                                            {isLoading ? '...' : 'Delete'}
                                        </Button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </Col>
                </Row>
            </Container>
        </div>
    );
};

export default AccountSettings;
}

src/pages/Events/CreateEvent.tsx:
{
import React, { useState, useContext } from 'react';
import { Container, Form, Button, Row, Col, Alert } from 'react-bootstrap';
import { useNavigate, useParams } from 'react-router-dom';
import AuthContext from '../../context/AuthContext';
import { createEvent } from '../../context/OrgService';
import LocationAutocomplete from '../../components/locationAutocomplete/LocationAutocomplete';

// Import components
import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';

interface EventData {
    title: string;
    description: string;
    date: string;
    location: string;
}

const CreateEvent: React.FC<{}> = () => {
    const navigate = useNavigate();
    const { id } = useParams<{ id: string }>();
    const { user, token } = useContext(AuthContext);
    const [eventData, setEventData] = useState<EventData>({
        title: '',
        description: '',
        date: '',
        location: '',
    });
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');

    const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setEventData({
            ...eventData,
            [e.target.id.replace('event', '').toLowerCase()]: e.target.value,
        });
    };

    const handleLocationChange = (location: string) => {
        setEventData({
            ...eventData,
            location: location,
        });
    };

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
    };

    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search events..."
            className="ms-3"
        />
    );

    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <></>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();

        // Form validation
        if (!eventData.title.trim()) {
            setError('Event title is required');
            return;
        }

        if (!eventData.description.trim()) {
            setError('Event description is required');
            return;
        }

        if (!eventData.date) {
            setError('Event date is required');
            return;
        }

        if (!eventData.location) {
            setError('Event location is required');
            return;
        }

        if (!id) {
            setError('Organization ID is missing');
            return;
        }

        setIsSubmitting(true);
        setError(null);

        try {
            const response = await createEvent(id, eventData);

            console.log('Event created successfully:', response);
            setSuccess('Event created successfully!');

            setTimeout(() => {
                navigate(`/organizations/${id}/events`);
            }, 700);
        } catch (error: any) {
            console.error('Error creating event:', error);

            // Handle specific error messages from the API
            if (error.response && error.response.data && error.response.data.message) {
                setError(error.response.data.message);
            } else {
                setError('Failed to create event. Please try again.');
            }
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <div className="sticky-top bg-dark z-3">
                        <Row>
                            <TopBar
                                searchComponent={searchComponent}
                                rightComponents={rightComponents}
                            />
                        </Row>
                    </div>
                    <div className="create-event-page bg-dark text-light min-vh-100">
                        {/* Main Content */}
                        <Container fluid className="px-4 pt-4">
                            <Row className="justify-content-center">
                                <Col xs={12} md={8} lg={6}>
                                    <h1
                                        className="text-center mb-5"
                                        style={{ fontFamily: 'Michroma, sans-serif' }}
                                    >
                                        Events
                                    </h1>

                                    <div className="text-center mb-5">
                                        <h2
                                            className="fs-1"
                                            style={{ fontFamily: 'Michroma, sans-serif' }}
                                        >
                                            Create a New Event
                                        </h2>
                                    </div>

                                    {error && (
                                        <Alert variant="danger" className="my-3">
                                            {error}
                                        </Alert>
                                    )}

                                    {success && (
                                        <Alert variant="success" className="my-3">
                                            {success}
                                        </Alert>
                                    )}

                                    <Form onSubmit={handleSubmit}>
                                        <Form.Group className="mb-4" controlId="eventTitle">
                                            <Form.Label
                                                style={{ fontFamily: 'Michroma, sans-serif' }}
                                                className="fs-4"
                                            >
                                                Event Title
                                            </Form.Label>
                                            <Form.Control
                                                type="text"
                                                placeholder="Enter event title"
                                                value={eventData.title}
                                                onChange={handleFormChange}
                                                className="bg-white border-secondary py-3"
                                                required
                                            />
                                        </Form.Group>

                                        <Form.Group className="mb-4" controlId="eventDescription">
                                            <Form.Label
                                                style={{ fontFamily: 'Michroma, sans-serif' }}
                                                className="fs-4"
                                            >
                                                Event Description
                                            </Form.Label>
                                            <Form.Control
                                                as="textarea"
                                                rows={5}
                                                placeholder="Enter event description"
                                                value={eventData.description}
                                                onChange={handleFormChange}
                                                className="bg-white border-secondary py-3"
                                                required
                                            />
                                        </Form.Group>

                                        <Form.Group className="mb-4" controlId="eventDate">
                                            <Form.Label
                                                style={{ fontFamily: 'Michroma, sans-serif' }}
                                                className="fs-4"
                                            >
                                                Event Date
                                            </Form.Label>
                                            <Form.Control
                                                type="date"
                                                value={eventData.date}
                                                onChange={handleFormChange}
                                                className="bg-white border-secondary py-3"
                                                required
                                            />
                                        </Form.Group>

                                        <LocationAutocomplete
                                            id="eventLocation"
                                            value={eventData.location}
                                            onChange={handleLocationChange}
                                            placeholder="Enter the event location"
                                            className=""
                                        />

                                        <div
                                            className="position-relative mt-5 pt-5"
                                            style={{ height: '250px', zIndex: 1100 }}
                                        >
                                            <div
                                                className="position-absolute"
                                                style={{
                                                    left: '-200px',
                                                    top: '200px',
                                                    zIndex: 1100,
                                                }}
                                            >
                                                <Button
                                                    variant="secondary"
                                                    onClick={() =>
                                                        navigate(`/organizations/${id}/events`)
                                                    }
                                                    disabled={isSubmitting}
                                                    className="py-2 px-4"
                                                >
                                                    Cancel
                                                </Button>
                                            </div>

                                            <div
                                                className="position-absolute"
                                                style={{
                                                    right: '-200px',
                                                    top: '200px',
                                                    zIndex: 1100,
                                                }}
                                            >
                                                <Button
                                                    variant="secondary"
                                                    type="submit"
                                                    disabled={isSubmitting}
                                                    className="py-2 px-4"
                                                >
                                                    {isSubmitting ? 'Creating...' : 'Create Event'}
                                                </Button>
                                            </div>
                                        </div>
                                    </Form>
                                </Col>
                            </Row>
                        </Container>
                    </div>
                </Col>
            </Row>
        </>
    );
};

export default CreateEvent;
}

src/pages/Events/EventDetails.tsx:
{
import React, { useState, useEffect, useContext } from 'react';
import { Container, Row, Col, Button, Alert, Card, Modal, Form } from 'react-bootstrap';
import { useParams, useNavigate } from 'react-router-dom';
import * as icon from 'react-bootstrap-icons';
import { NavLink } from 'react-router-dom';
import { format } from 'date-fns';

import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';

import AuthContext from '../../context/AuthContext';
import { Event, getOrganizationEvents, getWeather, getUpdateWeather, deleteEvent} from '../../context/OrgService';
import { isMemberOfOrg } from '../../context/AuthService';
import LocationAutocomplete from '../../components/locationAutocomplete/LocationAutocomplete';

const renderWeatherIcon = (code: number) => {
    if (code === 0 || code === 1) {
        return <icon.SunFill size={24} className="text-warning" />;
    }
    else if (code === 2) {
        return <icon.CloudSunFill size={24} className="text-light" />;
    }
    else if (code === 3) {
        return <icon.CloudFill size={24} className="text-light" />;
    }
    else if (code === 45 || code === 48) {
        return <icon.CloudFog2Fill size={24} className="text-light" />;
    }
    else if (code >= 51 && code <= 57 || code === 61) {
        return <icon.CloudDrizzleFill size={24} className="text-info" />;
    }
    else if (code === 63 || code === 65) {
        return <icon.CloudRainFill size={24} className="text-info" />;
    }
    else if (code === 66 || code === 67) {
        return <icon.CloudSleetFill size={24} className="text-info" />;
    }
    else if (code >= 71 && code <= 77 || code === 85 || code === 86) {
        return <icon.CloudSnowFill size={24} className="text-light" />;
    }
    else if (code >= 80 && code <= 82) {
        return <icon.CloudRainHeavyFill size={24} className="text-info" />;
    }
    else if (code >= 95 && code <= 99) {
        return <icon.CloudLightningRainFill size={24} className="text-warning" />;
    }
    else {
        return <icon.CloudFill size={24} className="text-light" />;
    }
};


const EventDetails: React.FC = () => {
    const navigate = useNavigate();
    const { id, eid } = useParams<{ id: string; eid: string }>();
    const { user, token } = useContext(AuthContext);
    const [searchTerm, setSearchTerm] = useState('');

    const [memberRole, setMemberRole] = useState<string | null>(null);
    const [event, setEvent] = useState<Event | null>(null);
    
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    
    const [deleteEventModal, setDeleteEventModal] = useState<boolean>(false);
    const [deletingEvent, setDeletingEvent] = useState<boolean>(false);

    const [currentLocation, setCurrentLocation] = useState<string>("")
    const [showLocationModal, setShowLocationModal] = useState<boolean>(false);
    const [isSubmitting, setIsSubmitting] = useState<boolean>(false);

    useEffect(() => {
        if (!id || !eid) return;

        const fetchEventDetails = async () => {
            try {
                setLoading(true);
                setError(null);
                
                if (user && token) {
                    try {
                        const reply = await isMemberOfOrg(user.id, id);
                        const userRelationRecord = reply.data.data;
                        setMemberRole(userRelationRecord.membership.role);
                    } catch (membershipError) {
                        console.error(`Error checking membership status: ${membershipError}`);
                    }
                }
                
                // Fetch event details
                const response = await getOrganizationEvents(id);
                const foundEvent = response.data.events.find(event => event.id === eid);
                if (foundEvent) {
                    setEvent(foundEvent);
                } else {
                    setError('Event not found');
                }
                
                setLoading(false);
            } catch (err) {
                console.error(`Error fetching event details for event ${eid}:`, err);
                setError(`Failed to load event details. Please try again later.`);
                setLoading(false);
            }
        };

        fetchEventDetails();
    }, [id, eid, user, token]);

    const handleDeleteEvent = async () => {
        if (!id || !eid) return;
        
        try {
            setDeletingEvent(true);
            const response = await deleteEvent(id, eid);
            
            if (response.status === 'success') {
                navigate(`/organizations/${id}/events`);
            } else {
                setError('Failed to delete event. Please try again.');
                setDeleteEventModal(false);
            }
            
            setDeletingEvent(false);
        } catch (error) {
            console.error('Error deleting event:', error);
            setError('Failed to delete event. Please try again.');
            setDeletingEvent(false);
            setDeleteEventModal(false);
        }
    };

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
    };

    const handleAddWeather = async () => {
        if (!id || !eid || !event) return;
        
        try {
            setLoading(true);
            const response = await getWeather(event.location as string, id, eid);
            if (response.data?.event) {
                setEvent(prevEvent => ({
                    ...prevEvent,
                    ...response.data.event,
                }));
            }
            
            setLoading(false);
        } catch (error) {
            console.error('Error updating weather data:', error);
            setError('Failed to update weather data. Please try again.');
            setLoading(false);
        }
    }

    const handleRefreshWeather = async () => {
        if (!id || !eid || !event) return;
        
        try {
            setLoading(true);
            const response = await getUpdateWeather(id, eid);
            if (response.data?.event) {
                setEvent(prevEvent => ({
                    ...prevEvent,
                    ...response.data.event,
                }));
            }
            
            setLoading(false);
        } catch (error) {
            console.error('Error updating weather data:', error);
            setError('Failed to update weather data. Please try again.');
            setLoading(false);
        }
    }

    useEffect(() => {
    if (showLocationModal && event?.location) {
      if (typeof event?.location === 'string') {
        setCurrentLocation(event.location);
      } else if (event.location.name) {
        setCurrentLocation(event.location.name);
      }
    }
  }, [showLocationModal, event?.location]);

  const handleLocationModalChange = (newLocation: string) => {
    setCurrentLocation(newLocation);
  };
  const handleLocationUpdated = (updatedEvent: Event) => {
      setEvent(prevEvent => {
          if (prevEvent) {
              return {
                  ...prevEvent,
                  ...updatedEvent
              };
          }
          return updatedEvent;
      });
  };

  const handleLocationModalSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
      if (!id || !eid) return;
      e.preventDefault();
      
      if (!currentLocation.trim()) {
        setError('Please enter a location');
        return;
      }

      setIsSubmitting(true);
      setError(null);
      
      try {
        // Update the event location using the existing API
        const response = await getWeather(currentLocation, id, eid);
        
        // Call the callback with the updated event data
        handleLocationUpdated(response.data.event);
        
        // Close the modal
        setShowLocationModal(false);
      } catch (error: any) {
        console.error('Error updating event location:', error);
        if (error.response?.data?.message) {
          setError(error.response.data.message);
        } else {
          setError('Failed to update event location. Please try again.');
        }
      } finally {
        setIsSubmitting(false);
      }
    };

    const formatDate = (dateString: string) => {
        try {
            const date = new Date(dateString);
            return format(date, 'MMMM d, yyyy');
        } catch (error) {
            console.log(error);
            return dateString;
        }
    };


    // Components to be injected into the TopBar
    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search events..."
            className="ms-3"
        />
    );
    
    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        {/* Create Event should only appear when an admin user is logged in */}
                        {memberRole === 'ADMIN' && (
                            <NavButton
                                to={`/organizations/${id}/events/create`}
                                variant="outline-light"
                                className="mx-1 top-bar-element"
                            >
                                Create Event
                            </NavButton>
                        )}

                        <NavLink to="/account-settings" className="text-light top-bar-element">
                            <icon.GearFill size={24} />
                        </NavLink>
                        <NavLink to="/logout" className="text-light top-bar-element">
                            <icon.BoxArrowRight size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    const pageActionComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        {/* Only show Members link if user is a member or admin */}
                        {memberRole === 'ADMIN' && (
                            <NavLink to={`/organizations/${id}/members`} className="text-light top-bar-element">
                                <icon.PersonLinesFill size={24} />
                            </NavLink>
                        )}
                        <NavButton 
                            to={`/organizations/${id}/events/${eid}/photos`}
                            variant="outline-light"
                            className="top-bar-element"
                        >
                            View Photos
                        </NavButton>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <div className="sticky-top bg-dark z-3">
                        <Row>
                            <TopBar
                                searchComponent={searchComponent}
                                rightComponents={rightComponents}
                            />
                        </Row>
                    </div>
                    <div className="p-3 bg-dark text-white">
                        <Container>
                            <Row className="align-items-center mb-4">
                                <Col>
                                    <h1 className="mb-4">Event Details</h1>
                                </Col>
                                <Col xs="auto" className="ms-auto me-5">
                                    {pageActionComponents}
                                </Col>
                            </Row>
                            
                            {error && (
                                <Alert variant="danger">{error}</Alert>
                            )}

                            {loading ? (
                                <div className="text-center p-5">Loading event details...</div>
                            ) : event ? (
                                <Row>
                                    <Col md={8}>
                                        <Card className="bg-dark text-white border-secondary mb-4">
                                            <Card.Header className="border-secondary">
                                                <h2>{event.title}</h2>
                                                <p className="text-light mb-0">Organized by {id && id.charAt(0).toUpperCase() + id.slice(1)}</p>
                                                {event.weather && (
                                                    <div className="event-weather mt-2 p-2 rounded">
                                                        <h5 className="text-light mb-1">Weather Forecast</h5>
                                                        <div className="d-flex align-items-center">
                                                            <div className="weather-icon me-2">
                                                                {renderWeatherIcon(event.weather.weatherCode)}
                                                            </div>
                                                            <div>
                                                                <p className="mb-1">{event.weather.weatherDescription} | {Math.round((event.weather.temperature * 9/5) + 32)}°F</p>
                                                                <p className="mb-0 small">
                                                                    <icon.Wind className="me-1" />
                                                                    Wind: {Math.round(event.weather.windSpeed * 0.621371)} mph | 
                                                                    <icon.Droplet className="mx-1" />
                                                                    Precipitation: {Math.round(event.weather.precipitation / 25.5)} in 
                                                                </p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                )}
                                            </Card.Header>
                                            <Card.Body>
                                                <Row className="mb-3">
                                                    <Col xs={12} md={6}>
                                                        <div className="mb-3">
                                                            <h5 className="text-light mb-1">Date</h5>
                                                            <p>{formatDate(event.date)}</p>
                                                        </div>
                                                    </Col>
                                                    <Col xs={12} md={6}>
                                                        <div className="mb-3">
                                                            <h5 className="text-light mb-1">Privacy</h5>
                                                            <p>
                                                                {event.isPublic ? (
                                                                    <span><icon.UnlockFill className="me-2" />Public</span>
                                                                ) : (
                                                                    <span><icon.LockFill className="me-2" />Private</span>
                                                                )}
                                                            </p>
                                                        </div>
                                                    </Col>
                                                </Row>
                                                
                                                <div className="mb-4">
                                                    <h4 className="text-light mb-3">Description</h4>
                                                    <p className="lead">{event.description}</p>
                                                </div>
                                                {event.location && (
                                                  <div className="mb-4">
                                                      <h4 className="text-light mb-2">Location</h4>
                                                      <p className="lead">{typeof event.location == 'string' ? event.location : event.location.name}</p>
                                                  </div>
                                                )}
                                                
                                                <Row className="mt-4">
                                                    <Col>
                                                        <div className="d-flex gap-3">
                                                            <NavButton
                                                                to={`/organizations/${id}/events/${eid}/photos`}
                                                                variant="outline-light"
                                                            >
                                                                Back to Event
                                                            </NavButton>
                                                            
                                                            {user && token && (
                                                                <NavButton
                                                                    to={`/organizations/${id}/events/${eid}/photos`}
                                                                    variant="secondary"
                                                                >
                                                                    View Photos
                                                                </NavButton>
                                                            )}
                                                        </div>
                                                    </Col>
                                                </Row>
                                            </Card.Body>
                                            <Card.Footer className="text-light border-secondary">
                                                <small>Created: {formatDate(event.createdAt)}</small>
                                                {event.updatedAt !== event.createdAt && (
                                                    <small className="ms-3">Updated: {formatDate(event.updatedAt)}</small>
                                                )}
                                            </Card.Footer>
                                        </Card>
                                    </Col>
                                    
                                    <Col md={4}>
                                        {event.imageUrl && (
                                            <Card className="bg-dark text-white border-secondary mb-4">
                                                <Card.Img 
                                                    variant="top" 
                                                    src={event.imageUrl} 
                                                    alt={event.title}
                                                    className="img-fluid"
                                                />
                                            </Card>
                                        )}
                                        
                                        <Card className="bg-dark text-white border-secondary">
                                            <Card.Header className="border-secondary">
                                                <h4>Event Information</h4>
                                            </Card.Header>
                                            <Card.Body>
                                                <div className="mb-3">
                                                    <h5 className="text-light mb-1">Event ID</h5>
                                                    <p className="text-light">{event.id}</p>
                                                </div>
                                                    <div className="d-grid gap-2 mt-4">
                                                      {event.weather && memberRole == 'MEMBER' && (
                                                        <Button 
                                                            variant="outline-light"
                                                            onClick={() => handleRefreshWeather()}
                                                        >
                                                            <icon.Cloud className="me-2" />
                                                            {loading ? 'Updating...' : 'Refresh Weather'}
                                                        </Button>
                                                      )}
                                                    {user && token && memberRole == 'ADMIN' && (
                                                      <>
                                                        {event.location && (
                                                          <Button 
                                                              variant="outline-light"
                                                              onClick={() => event.weather ? handleRefreshWeather() :handleAddWeather()}
                                                          >
                                                              <icon.Cloud className="me-2" />
                                                              {loading ? 'Updating...' : (event.weather ? 'Refresh Weather' : 'Add Weather')}
                                                          </Button>
                                                        )}
                                                        <Button 
                                                            variant="outline-light"
                                                            onClick={() => setShowLocationModal(true)}
                                                        >
                                                            <icon.PencilFill className="me-2" />
                                                            Edit Location
                                                        </Button>
                                                        <Button 
                                                            variant="outline-danger"
                                                            onClick={()=> setDeleteEventModal(true)}
                                                        >
                                                            <icon.TrashFill className="me-2" />
                                                            Delete Event
                                                        </Button>
                                                        </>
                                                  )}
                                                    </div>
                                            </Card.Body>
                                        </Card>
                                    </Col>
                                </Row>
                            ) : (
                                <div className="text-center p-5">
                                    <h3>Event not found</h3>
                                    <p>The event you're looking for doesn't exist or has been removed.</p>
                                    <NavButton 
                                        to={`/organizations/${id}/events/${eid}`}
                                        variant="outline-light"
                                        className="mt-3"
                                    >
                                        Back to Event
                                    </NavButton>
                                </div>
                            )}
                        </Container>
                    </div>
                </Col>
            </Row>
            <Modal 
                show={deleteEventModal} 
                onHide={() => setDeleteEventModal(false)}
                centered
                backdrop="static"
                className="text-dark "
            >
                <Modal.Header closeButton>
                    <Modal.Title>Delete Event</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <p>Are you sure you want to delete this event? This action cannot be undone.</p>
                    <p><strong>Event:</strong> {event?.title}</p>
                </Modal.Body>
                <Modal.Footer>
                    <Button 
                        variant="secondary" 
                        onClick={() => setDeleteEventModal(false)}
                        disabled={deletingEvent}
                    >
                        Cancel
                    </Button>
                    <Button 
                        variant="danger" 
                        onClick={handleDeleteEvent}
                        disabled={deletingEvent}
                    >
                        {deletingEvent ? 'Deleting...' : 'Delete Event'}
                    </Button>
                </Modal.Footer>
            </Modal>
             {/* Edit Location Modal */}
            <Modal 
                show={showLocationModal} 
                onHide={() => setShowLocationModal(false)}
                centered
                backdrop="static"
                className="text-dark"
            >
                <Modal.Header closeButton>
                    <Modal.Title>Edit Event Location</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {error && (
                        <Alert variant="danger" dismissible onClose={() => setError(null)}>
                            {error}
                        </Alert>
                    )}

                    <Form onSubmit={handleLocationModalSubmit}>
                        <LocationAutocomplete
                            id="eventLocation"
                            value={currentLocation}
                            onChange={handleLocationModalChange}
                            placeholder="Enter event location"
                            required={true}
                        />
                        
                        <div className="d-flex justify-content-end mt-4">
                            <Button 
                                variant="secondary" 
                                onClick={() => setShowLocationModal(false)}
                                disabled={isSubmitting}
                                className="me-2"
                            >
                                Cancel
                            </Button>
                            <Button 
                                variant="primary" 
                                type="submit"
                                disabled={isSubmitting}
                            >
                                {isSubmitting ? 'Updating...' : 'Update Location'}
                            </Button>
                        </div>
                    </Form>
                </Modal.Body>
            </Modal>
        </>
    );
};

export default EventDetails;
}

src/pages/Events/SingleEvents.tsx:
{
import React, { useState, useEffect, useContext } from 'react';
import { Button, Col, Row, Modal, Alert, Form } from 'react-bootstrap';
import * as icon from 'react-bootstrap-icons';
import { NavLink, useParams, useNavigate } from 'react-router-dom';

import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import GalleryCard from '../../components/cards/galleryCard/GalleryCard';
import { isMemberOfOrg } from '../../context/AuthService';
import {
    Event,
    getPublicOrganizationEvents,
    getOrganizationEvents,
} from '../../context/OrgService';
import AuthContext from '../../context/AuthContext';
import {
    getOrganizationMembershipRequests,
    sendJoinRequest,
} from '../../context/MembershipService';

const SingleEvents: React.FC = () => {
    const navigate = useNavigate();
    const { id } = useParams<{ id: string }>();
    const { user, token } = useContext(AuthContext);
    const [searchTerm, setSearchTerm] = useState('');

    const [requested, setRequested] = useState<boolean>(false);
    const [memberRole, setMemberRole] = useState<string | null>(null);
    const [events, setEvents] = useState<Event[]>([]);
    const [filteredEvents, setFilteredEvents] = useState<Event[]>([]);

    const [lastEvaluatedKey, setLastEvaluatedKey] = useState<string | null>(null);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [hasMore, setHasMore] = useState<boolean>(true);

    const [showJoinModal, setShowJoinModal] = useState<boolean>(false);
    const [message, setMessage] = useState<string>('');
    const [joinLoading, setJoinLoading] = useState<boolean>(false);
    const [joinSuccess, setJoinSuccess] = useState<boolean>(false);
    const [joinError, setJoinError] = useState<string | null>(null);

    useEffect(() => {
        if (!id) return;

        const fetchEvents = async () => {
            let response;
            try {
                setLoading(true);
                setError(null);

                if (!user || !token) {
                    response = await getPublicOrganizationEvents(id);
                } else {
                    try {
                        try {
                            const reply = await isMemberOfOrg(user.id, id);
                            const userRelationRecord = reply.data.data;
                            setMemberRole(userRelationRecord.membership.role);
                            response = await getOrganizationEvents(id);
                        } catch (e: any) {
                            console.log(e);
                            const reply = await getOrganizationMembershipRequests(id);
                            const orgRequests = reply.data.requests;
                            setRequested(orgRequests.some(req => req.userId == user.id));
                            response = await getPublicOrganizationEvents(id);
                        }
                    } catch (_: any) {
                        console.log(_);
                    }
                }
                if (!response) throw Error('No response');

                setEvents(response.data.events);
                setFilteredEvents(response.data.events);
                setLastEvaluatedKey(response.lastEvaluatedKey);
                setHasMore(response.lastEvaluatedKey !== null);
                setLoading(false);
            } catch (err) {
                console.error(`Error fetching events for organization ${id}:`, err);
                setError(`Failed to load events for this organization. Please try again later.`);
                setLoading(false);
            }
        };

        fetchEvents();
    }, [id, user, token]);

    useEffect(() => {
        if (searchTerm.trim() === '') {
            setFilteredEvents(events);
        } else {
            const filtered = events.filter(event => {
                const titleMatch = event.title.toLowerCase().includes(searchTerm.toLowerCase());
                const descMatch =
                    event.description?.toLowerCase().includes(searchTerm.toLowerCase()) || false;
                return titleMatch || descMatch;
            });
            setFilteredEvents(filtered);
        }
    }, [events, searchTerm]);

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
    };

    const handleLoadMore = async () => {
        if (loading || !hasMore || !id) return;

        try {
            setLoading(true);
            const response = await getPublicOrganizationEvents(id, lastEvaluatedKey ?? undefined);
            const existingEventIds = new Map(events.map(event => [event.id, true]));

            const newEvents = response.data.events.filter(event => !existingEventIds.has(event.id));

            if (newEvents.length > 0) {
                setEvents(prev => [...prev, ...newEvents]);
            }

            setLastEvaluatedKey(response.lastEvaluatedKey);
            setHasMore(response.lastEvaluatedKey !== null);
            setLoading(false);
        } catch (err) {
            console.error(`Error loading more events for organization ${id}:`, err);
            setError('Failed to load more events. Please try again.');
            setLoading(false);
        }
    };

    const handleShowJoinModal = () => {
        setShowJoinModal(true);
        setJoinError(null);
    };

    const handleCloseJoinModal = () => {
        setShowJoinModal(false);
        setJoinError(null);
        setMessage('');
    };

    const handleJoinSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();

        if (!id || !user) return;

        try {
            setJoinLoading(true);
            await sendJoinRequest(id, message);
            setJoinSuccess(true);
            setJoinLoading(false);
            setRequested(true);
        } catch (error) {
            console.log(error);
            setJoinLoading(false);
            setJoinError('Failed to send the join request');
            setJoinSuccess(false);
            setRequested(false);
        }
    };

    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search events..."
            className="ms-3"
        />
    );

    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        {/* Create Event should only appear when an admin user is logged in */}
                        {memberRole == 'ADMIN' && (
                            <NavButton
                                to={`/organizations/${id}/events/create`}
                                variant="outline-light"
                                className="mx-1 top-bar-element"
                            >
                                Create Event
                            </NavButton>
                        )}

                        {user && !memberRole && !requested && (
                            <Button
                                variant="outline-light"
                                className="mx-1 top-bar-element custom-create-button"
                                onClick={handleShowJoinModal}
                            >
                                Join the Org !
                            </Button>
                        )}

                        {requested && <p className="ml-2 mt-2 text-info"> Request Pending! </p>}

                        <NavLink to="/account-settings" className="text-light top-bar-element">
                            <icon.GearFill size={24} />
                        </NavLink>
                        <NavLink to="/logout" className="text-light top-bar-element">
                            <icon.BoxArrowRight size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    const pageActionComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        {/* Only show Members link if user is a member or admin */}
                        {memberRole === 'ADMIN' && (
                            <NavLink
                                to={`/organizations/${id}/members`}
                                className="text-light top-bar-element"
                            >
                                <icon.PersonLinesFill size={24} />
                            </NavLink>
                        )}
                        <NavLink
                            to={`/organizations/${id}/details`}
                            className="text-light top-bar-element"
                        >
                            <icon.ListUl size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavLink
                            to={`/organizations/${id}/details`}
                            className="text-light top-bar-element"
                        >
                            <icon.ListUl size={24} />
                        </NavLink>
                    </>
                )}
            </div>
        </>
    );

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <div className="sticky-top bg-dark z-3">
                        <Row>
                            <TopBar
                                searchComponent={searchComponent}
                                rightComponents={rightComponents}
                            />
                        </Row>
                    </div>
                    <div className="p-3 bg-dark text-white">
                        <Row className="align-items-center mb-4">
                            <Col>
                                <h1 className="mb-4">
                                    Events: {id && id.charAt(0).toUpperCase() + id.slice(1)}
                                </h1>
                            </Col>
                            <Col>
                                <p className="mb-4">
                                    Role: {`${memberRole ? memberRole : user ? 'User' : 'Guest'}`}
                                </p>
                            </Col>

                            <Col xs="auto" className="ms-auto me-5">
                                {pageActionComponents}
                            </Col>
                        </Row>
                        <Row>
                            {error && <div className="alert alert-danger">{error}</div>}

                            {showJoinModal && (
                                <Modal show={showJoinModal} onHide={handleCloseJoinModal} centered>
                                    <Modal.Header closeButton className="bg-dark text-white">
                                        <Modal.Title>Join Organization</Modal.Title>
                                    </Modal.Header>
                                    <Modal.Body className="bg-dark text-white">
                                        {joinSuccess ? (
                                            <Alert variant="success">
                                                Your request to join the organization has been sent
                                                successfully!
                                            </Alert>
                                        ) : (
                                            <Form onSubmit={handleJoinSubmit}>
                                                {joinError && (
                                                    <Alert variant="danger">{joinError}</Alert>
                                                )}
                                                <Form.Group className="mb-3">
                                                    <Form.Label>Message (Optional)</Form.Label>
                                                    <Form.Control
                                                        as="textarea"
                                                        rows={3}
                                                        placeholder="Tell the organization why you'd like to join..."
                                                        value={message}
                                                        onChange={e => setMessage(e.target.value)}
                                                        className="bg-secondary text-white"
                                                    />
                                                </Form.Group>
                                                <div className="d-flex justify-content-end">
                                                    <Button
                                                        variant="primary"
                                                        type="submit"
                                                        disabled={joinLoading}
                                                    >
                                                        {joinLoading
                                                            ? 'Sending...'
                                                            : 'Submit Request'}
                                                    </Button>
                                                    <Button
                                                        variant="secondary"
                                                        onClick={handleCloseJoinModal}
                                                        className="me-2"
                                                    >
                                                        Cancel
                                                    </Button>
                                                </div>
                                            </Form>
                                        )}
                                    </Modal.Body>
                                </Modal>
                            )}

                            {loading && events.length === 0 ? (
                                <div className="text-center p-5">Loading events...</div>
                            ) : filteredEvents.length === 0 ? (
                                <div className="text-center p-5">
                                    {searchTerm
                                        ? 'No matching events found.'
                                        : 'No events for this organization.'}

                                    {user && token && memberRole === 'ADMIN' && (
                                        <div className="mt-4">
                                            <Button
                                                variant="primary"
                                                onClick={() =>
                                                    navigate(`/organizations/${id}/events/create`)
                                                }
                                            >
                                                Create Your First Event
                                            </Button>
                                        </div>
                                    )}
                                </div>
                            ) : (
                                <div className="d-flex flex-wrap gap-4">
                                    {filteredEvents.map(event => (
                                        <div key={event.id}>
                                            <GalleryCard
                                                item={event}
                                                className="event"
                                                orgName={event.GSI2PK}
                                            />
                                        </div>
                                    ))}
                                </div>
                            )}

                            {hasMore && filteredEvents.length > 0 && !searchTerm && (
                                <div className="text-center mt-4 mb-4">
                                    <Button
                                        onClick={handleLoadMore}
                                        disabled={loading}
                                        variant="primary"
                                    >
                                        {loading ? 'Loading...' : 'Load More'}
                                    </Button>
                                </div>
                            )}
                        </Row>
                    </div>
                </Col>
            </Row>
        </>
    );
};

export default SingleEvents;
}

src/pages/Events/UploadEventPhoto.tsx:
{
import React, { useState, useContext } from 'react';
import { Container, Form, Button, Row, Col } from 'react-bootstrap';
import { useNavigate, useParams } from 'react-router-dom';
import AuthContext from '../../context/AuthContext';
import * as icon from 'react-bootstrap-icons';

import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import { NavLink } from 'react-router-dom';

import { uploadEventPhoto } from '../../context/PhotoService';

interface PhotoData {
    title: string;
    description: string;
    photos: File[];
}

const UploadEventPhoto: React.FC = () => {
    const navigate = useNavigate();
    const { id, eid } = useParams();
    const { user, token } = useContext(AuthContext);
    const [photoData, setPhotoData] = useState<PhotoData>({
        title: '',
        description: '',
        photos: [],
    });
    const [previewUrls, setPreviewUrls] = useState<string[]>([]);
    const [error, setError] = useState<string | null>(null);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');
    const [uploadProgress, setUploadProgress] = useState(0);

    const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setPhotoData({
            ...photoData,
            title: e.target.value,
        });
    };

    const handleDescriptionChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setPhotoData({
            ...photoData,
            description: e.target.value,
        });
    };

    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files.length > 0) {
            const files = Array.from(e.target.files);
            const validFiles: File[] = [];
            const newPreviewUrls: string[] = [];
            let errorMessage = null;

            // Validate each file
            files.forEach(file => {
                // Check file type
                if (!file.type.match('image.*')) {
                    errorMessage = `File "${file.name}" is not an image file`;
                    return;
                }

                // Check file size (e.g., limit to 5MB)
                if (file.size > 5 * 1024 * 1024) {
                    errorMessage = `File "${file.name}" exceeds 5MB size limit`;
                    return;
                }

                validFiles.push(file);

                // Create preview URL
                const reader = new FileReader();
                reader.onload = () => {
                    newPreviewUrls.push(reader.result as string);
                    // Update preview URLs if all files have been processed
                    if (newPreviewUrls.length === validFiles.length) {
                        setPreviewUrls(newPreviewUrls);
                    }
                };
                reader.readAsDataURL(file);
            });

            if (errorMessage) {
                setError(errorMessage);
                return;
            }

            setPhotoData({
                ...photoData,
                photos: validFiles,
            });

            setError(null);
        }
    };

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        console.log('Search submitted:', searchTerm);
        // Implement search logic
    };

    /* Components to be injected into the TopBar*/
    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search photos..."
            className="ms-3"
        />
    );

    /* Components to be injected into the TopBar*/
    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        <NavLink to="/account-settings" className="text-light top-bar-element">
                            <icon.GearFill size={24} />
                        </NavLink>
                        <NavLink to="/logout" className="text-light top-bar-element">
                            <icon.BoxArrowRight size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();

        // Form validation
        if (!eid) {
            setError('Event ID is missing');
            return;
        }

        if (photoData.photos.length === 0) {
            setError('Please select at least one photo to upload');
            return;
        }

        setIsSubmitting(true);
        setError(null);

        // Create form data for file upload
        const formData = new FormData();

        if (photoData.title) {
            formData.append('title', photoData.title);
        }

        if (photoData.description) {
            formData.append('description', photoData.description);
        }

        // Append all photos to the FormData
        photoData.photos.forEach(photo => {
            formData.append('photo', photo);
        });

        // Add a query parameter to indicate multiple file upload
        const uploadUrl = `/organizations/${id}/events/${eid}/photos?multiple=true`;

        try {
            // Make API call to upload photos
            await uploadEventPhoto(id as string, eid as string, formData, true, (progress) => {
                setUploadProgress(progress);
            });
            console.log('Photos uploaded successfully');

            // Redirect back to event photos page
            navigate(`/organizations/${id}/events/${eid}/photos`);
        } catch (error: any) {
            console.error('Error uploading photos:', error);

            // Handle specific error messages from the API
            if (error.response && error.response.data && error.response.data.message) {
                setError(error.response.data.message);
            } else {
                setError('Failed to upload photos. Please try again.');
            }
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <div className="sticky-top bg-dark z-3">
                        <Row>
                            <TopBar
                                searchComponent={searchComponent}
                                rightComponents={rightComponents}
                            />
                        </Row>
                    </div>
                    <div className="upload-photo-page bg-dark text-light min-vh-100">
                        {/* Main Content */}
                        <Container fluid className="px-4 pt-4">
                            <Row className="justify-content-center">
                                <Col xs={12} md={8} lg={6}>
                                    <h1
                                        className="text-center mb-5"
                                        style={{ fontFamily: 'Michroma, sans-serif' }}
                                    >
                                        Photos
                                    </h1>

                                    <div className="text-center mb-5">
                                        <h2
                                            className="fs-1"
                                            style={{ fontFamily: 'Michroma, sans-serif' }}
                                        >
                                            Upload your Event Photos below!
                                        </h2>
                                    </div>

                                    {error && (
                                        <div className="alert alert-danger my-3" role="alert">
                                            {error}
                                        </div>
                                    )}

                                    <Form onSubmit={handleSubmit}>
                                        <Form.Group className="mb-4" controlId="photoTitle">
                                            <Form.Label
                                                style={{ fontFamily: 'Michroma, sans-serif' }}
                                                className="fs-4"
                                            >
                                                Photo Title (Optional)
                                            </Form.Label>
                                            <Form.Control
                                                type="text"
                                                placeholder="Enter photo title"
                                                value={photoData.title}
                                                onChange={handleTitleChange}
                                                className="bg-white border-secondary py-3"
                                            />
                                        </Form.Group>

                                        <Form.Group className="mb-4" controlId="photoDescription">
                                            <Form.Label
                                                style={{ fontFamily: 'Michroma, sans-serif' }}
                                                className="fs-4"
                                            >
                                                Photo Description (Optional)
                                            </Form.Label>
                                            <Form.Control
                                                type="text"
                                                placeholder="Enter photo description"
                                                value={photoData.description}
                                                onChange={handleDescriptionChange}
                                                className="bg-white border-secondary py-3"
                                            />
                                        </Form.Group>

                                        <Form.Group className="mb-4" controlId="photoFile">
                                            <Form.Label
                                                style={{ fontFamily: 'Michroma, sans-serif' }}
                                                className="fs-4"
                                            >
                                                Upload your Photos
                                            </Form.Label>

                                            {previewUrls.length > 0 && (
                                                <div className="mb-3">
                                                    <h5 className="mb-3">
                                                        {photoData.photos.length} photos selected
                                                    </h5>
                                                    <div className="d-flex flex-wrap gap-2 justify-content-center">
                                                        {previewUrls.map((url, index) => (
                                                            <div key={index} className="position-relative">
                                                                <img
                                                                    src={url}
                                                                    alt={`Photo preview ${index + 1}`}
                                                                    style={{
                                                                        height: '100px',
                                                                        width: '100px',
                                                                        objectFit: 'cover',
                                                                    }}
                                                                    className="border rounded"
                                                                />
                                                            </div>
                                                        ))}
                                                    </div>
                                                </div>
                                            )}

                                            {/* File upload wrapper with controlled width */}
                                            <div>
                                                <div style={{ width: '66.7%' }}>
                                                    {' '}
                                                    {/* This makes it 2/3 width */}
                                                    <Form.Control
                                                        type="file"
                                                        onChange={handleFileChange}
                                                        accept="image/*"
                                                        multiple
                                                        className="bg-white text-dark border-secondary rounded-3"
                                                    />
                                                </div>
                                                <small className="text-muted d-block mt-2">
                                                    You can select multiple photos at once.
                                                    Maximum 10 photos, 5MB each.
                                                </small>
                                            </div>
                                        </Form.Group>

                                        {isSubmitting && uploadProgress > 0 && (
                                            <div className="my-3">
                                                <div className="progress">
                                                    <div
                                                        className="progress-bar progress-bar-striped progress-bar-animated"
                                                        role="progressbar"
                                                        style={{ width: `${uploadProgress}%` }}
                                                        aria-valuenow={uploadProgress}
                                                        aria-valuemin={0}
                                                        aria-valuemax={100}
                                                    >
                                                        {uploadProgress}%
                                                    </div>
                                                </div>
                                            </div>
                                        )}

                                        <div
                                            className="position-relative mt-5 pt-5"
                                            style={{ height: '250px' }}
                                        >
                                            <div
                                                className="position-absolute"
                                                style={{ left: '-200px', top: '200px' }}
                                            >
                                                <Button
                                                    variant="secondary"
                                                    onClick={() =>
                                                        navigate(
                                                            `/organizations/${id}/events/${eid}/photos`
                                                        )
                                                    }
                                                    disabled={isSubmitting}
                                                    className="py-2 px-4"
                                                >
                                                    Cancel
                                                </Button>
                                            </div>

                                            <div
                                                className="position-absolute"
                                                style={{ right: '-200px', top: '200px' }}
                                            >
                                                <Button
                                                    variant="secondary"
                                                    type="submit"
                                                    disabled={isSubmitting}
                                                    className="py-2 px-4"
                                                >
                                                    {isSubmitting
                                                        ? `Uploading ${photoData.photos.length} photo${photoData.photos.length !== 1 ? 's' : ''}...`
                                                        : `Upload ${photoData.photos.length || 'No'} Photo${photoData.photos.length !== 1 ? 's' : ''}`}
                                                </Button>
                                            </div>
                                        </div>
                                    </Form>
                                </Col>
                            </Row>
                        </Container>
                    </div>
                </Col>
            </Row>
        </>
    );
};

export default UploadEventPhoto;}

src/pages/Events/ViewEvents.tsx:
{
import React, { useState, useEffect, useRef, useContext } from 'react';
import { Button, Col, Row } from 'react-bootstrap';
import * as icon from 'react-bootstrap-icons';
import { NavLink, useParams } from 'react-router-dom';

import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import GalleryCard from '../../components/cards/galleryCard/GalleryCard';
import {
    Organization,
    Event,
    getPublicOrganizations,
    getPublicOrganizationEvents,
    OrganizationsResponse,
} from '../../context/OrgService';
import AuthContext from '../../context/AuthContext';

const Events: React.FC = () => {
    const { user, token } = useContext(AuthContext);
    const [searchTerm, setSearchTerm] = useState('');
    const [organizations, setOrganizations] = useState<Organization[]>([]);
    const [lastEvaluatedKeyOrg, setlastEvaluatedKeyOrg] = useState<string | null>(null);
    const [events, setEvents] = useState<Event[]>([]);
    const [lastEvaluatedKeyOrgEvent, setlastEvaluatedKeyOrgEvent] = useState<
        Record<string, string | null>
    >({});
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    const [hasMore, setHasMore] = useState<boolean>(true);
    const fetchedRef = useRef(false);
    const { id } = useParams<{ id: string }>();

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        console.log('Search submitted:', searchTerm);
        // Implement your search logic here organizations
    };

    /* Components to be injected into the TopBar*/
    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search events..."
            className="ms-3"
        />
    );

    /* Components to be injected into the TopBar*/
    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        <NavLink to="/account-settings" className="text-light top-bar-element">
                            <icon.GearFill size={24} />
                        </NavLink>
                        <NavLink to="/logout" className="text-light top-bar-element">
                            <icon.BoxArrowRight size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    const pageActionComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        {/* Apply to Organization should only appear when an user who is not part of an org is logged in */}
                        {/* <NavButton
                            to="/organizations/:id/apply"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Apply to Organization
                        </NavButton> */}

                        {/* PersonLinesFill icon should only appear when an admin user of an org is logged in */}
                        <NavLink
                            to={`/organizations/${id}/members`}
                            className="text-light top-bar-element"
                        >
                            <icon.PersonLinesFill size={24} />
                        </NavLink>
                        <NavLink
                            to={`/organizations/${id}/details`}
                            className="text-light top-bar-element"
                        >
                            <icon.ListUl size={24} />
                        </NavLink>
                    </>
                ) : (
                    <></>
                )}
            </div>
        </>
    );

    const fetchOrganizations = async (
        key: string | undefined = undefined
    ): Promise<OrganizationsResponse | null> => {
        setLoading(true);
        try {
            const orgs = await getPublicOrganizations(key);
            const newOrgs = orgs;

            if (key) {
                setOrganizations(prev => [...prev, ...newOrgs.data.organizations]);
            } else {
                setOrganizations(newOrgs.data.organizations);
            }

            setlastEvaluatedKeyOrg(orgs.lastEvaluatedKey);
            setHasMore(orgs.lastEvaluatedKey !== null);
            setLoading(false);
            console.log(newOrgs);
            return newOrgs;
        } catch (err) {
            setError('Failed to fetch organizations');
            setLoading(false);
            return null;
        }
    };

    const fetchEventsForOrganizations = async (orgs: Organization[]) => {
        const newEvents: Event[] = [];
        const newEventKeys: Record<string, string | null> = {};

        for (const org of orgs) {
            try {
                const res = await getPublicOrganizationEvents(org.name);
                // console.log(org.name)
                // console.log(res)
                newEvents.push(...res.data.events);
                newEventKeys[org.id] = res.lastEvaluatedKey ?? null;
            } catch {
                console.error(`Failed to fetch events for org ${org.id}`);
            }
        }

        setEvents(prev => [...prev, ...newEvents]);
        setlastEvaluatedKeyOrgEvent(prev => ({ ...prev, ...newEventKeys }));
    };

    useEffect(() => {
        if (fetchedRef.current) return;
        fetchedRef.current = true;

        const initialize = async () => {
            setLoading(true);
            const newOrgs = await fetchOrganizations();
            if (newOrgs) {
                await fetchEventsForOrganizations(newOrgs.data.organizations);
                setLoading(false);
            }
        };

        initialize();
    }, []);

    const loadMore = async () => {
        if (loading) return;
        setLoading(true);

        let allFetched = true;
        const newEvents: Event[] = [];
        const updatedKeys: Record<string, string | null> = { ...lastEvaluatedKeyOrgEvent };

        // Fetch more events for current orgs
        for (const org of organizations) {
            // Use `organizations` here
            const nextKey = lastEvaluatedKeyOrgEvent[org.id];
            if (nextKey !== null) {
                try {
                    const res = await getPublicOrganizationEvents(org.id, nextKey);
                    newEvents.push(...res.data.events);
                    updatedKeys[org.id] = res.lastEvaluatedKey ?? null;

                    if (res.lastEvaluatedKey !== null) {
                        allFetched = false;
                    }
                } catch {
                    console.error(`Error fetching more events for org ${org.id}`);
                }
            }
        }

        setEvents(prev => [...prev, ...newEvents]);
        setlastEvaluatedKeyOrgEvent(updatedKeys);

        // If all events were fetched, try fetching more orgs
        let newOrgKey = lastEvaluatedKeyOrg;
        let moreOrgsFetched = false;
        if (allFetched && lastEvaluatedKeyOrg !== null) {
            const newOrgs = await fetchOrganizations(lastEvaluatedKeyOrg);
            if (newOrgs) {
                await fetchEventsForOrganizations(newOrgs.data.organizations);
                newOrgKey = newOrgs.data.organizations.length > 0 ? newOrgs.lastEvaluatedKey : null; // Use newOrgs to get the key
                moreOrgsFetched = newOrgs.data.organizations.length > 0 ? true : false;
            }
        }

        // Determine if there's more data
        const anyOrgHasMoreEvents = Object.values(updatedKeys).some(k => k !== null);
        const canFetchMoreOrgs = newOrgKey !== null;

        console.log('Has more events:', anyOrgHasMoreEvents);
        console.log('Has more orgs:', canFetchMoreOrgs);

        setHasMore(canFetchMoreOrgs);
        setLoading(false);
    };

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <div className="sticky-top bg-dark z-3">
                        <Row>
                            <TopBar
                                searchComponent={searchComponent}
                                rightComponents={rightComponents}
                            />
                        </Row>
                    </div>
                    <div className="p-3 bg-dark text-white">
                        <Row className="align-items-center mb-4">
                            <Col>
                                <h1 className="mb-4">Events</h1>
                            </Col>

                            <Col xs="auto" className="ms-auto me-5">
                                {pageActionComponents}
                            </Col>
                        </Row>
                        <Row>
                            {error && <p className="text-red-500">{error}</p>}

                            {events.map(event => (
                                <Col>
                                    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-4">
                                        <GalleryCard
                                            key={event.id}
                                            item={event}
                                            className={`event-card`}
                                            orgName={event.GSI2PK}
                                        />
                                    </div>
                                </Col>
                            ))}
                            <div className="text-center mt-4 mb-4">
                                {hasMore && (
                                    <div className="text-center mt-4 mb-4">
                                        <Button
                                            onClick={loadMore}
                                            disabled={loading}
                                            //className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                                        >
                                            {loading ? 'Loading...' : 'Load More'}
                                        </Button>
                                    </div>
                                )}
                            </div>
                        </Row>
                    </div>
                </Col>
            </Row>
        </>
    );
};

export default Events;
}

src/pages/Home/Home.tsx:
{
import React, { useState, useEffect, useContext } from 'react';
import AuthContext from '../../context/AuthContext';
import { Col, Row, Button, Container } from 'react-bootstrap';
import * as icon from 'react-bootstrap-icons';
import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import { NavLink } from 'react-router-dom';
import OrganizationRow from '../../components/organizationRow/OrganizationRow';
import { Organization, getPublicOrganizations } from '../../context/OrgService';

const Home = () => {
    const { user, token } = useContext(AuthContext);
    const [searchTerm, setSearchTerm] = useState('');
    const [organizations, setOrganizations] = useState<Organization[]>([]);
    const [displayCount, setDisplayCount] = useState<number>(3); // Start with 3 rows
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [lastEvaluatedKey, setLastEvaluatedKey] = useState<string | null>(null);
    const [allOrganizationsLoaded, setAllOrganizationsLoaded] = useState<boolean>(false);

    const fetchOrganizations = async (key: string | undefined = undefined) => {
        try {
            setLoading(true);
            const response = await getPublicOrganizations(key);
            if (key) {
                setOrganizations(prev => [...prev, ...response.data.organizations]);
            } else {
                setOrganizations(response.data.organizations);
            }
            setLastEvaluatedKey(response.lastEvaluatedKey);
            setAllOrganizationsLoaded(response.lastEvaluatedKey === null);
            setLoading(false);
        } catch (err) {
            console.error('Error fetching organizations:', err);
            setError('Failed to load organizations. Please try again later.');
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchOrganizations();
        
        // Set up a timer to refresh organizations every 45 minutes to get fresh presigned URLs
        // This is less than the typical 1-hour expiration time for presigned URLs
        const refreshInterval = setInterval(() => {
            console.log("Refreshing organization data to update presigned URLs");
            fetchOrganizations();
        }, 45 * 60 * 1000); // 45 minutes in milliseconds
        
        // Cleanup the interval when component unmounts
        return () => clearInterval(refreshInterval);
    }, []);

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        console.log('Search submitted:', searchTerm);
        // searching
    };

    const handleLoadMore = () => {
        if (displayCount >= organizations.length) {
            if (lastEvaluatedKey) {
                fetchOrganizations(lastEvaluatedKey);
            }
        }
        setDisplayCount(prev => prev + 3);
    };

    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search organizations..."
            className="ms-2"
        />
    );

    /* Components to be injected into the TopBar*/
    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        <NavLink to="/account-settings" className="text-light top-bar-element">
                            <icon.GearFill size={24} />
                        </NavLink>
                        <NavLink to="/logout" className="text-light top-bar-element">
                            <icon.BoxArrowRight size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    const displayedOrganizations = organizations.slice(0, displayCount);

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <TopBar searchComponent={searchComponent} rightComponents={rightComponents} />
                    <Container fluid className="px-4 py-3">
                        <h1 className="mb-4 page-title">Organizations & Event</h1>
                        {loading && organizations.length === 0 ? (
                            <div className="text-center p-5">Loading organizations...</div>
                        ) : error ? (
                            <div className="alert alert-danger">{error}</div>
                        ) : organizations.length === 0 ? (
                            <div className="text-center p-5">No organizations found.</div>
                        ) : (
                            <>
                                {/* Organization Rows */}
                                {displayedOrganizations.map(org => (
                                    <OrganizationRow key={org.id} organization={org} />
                                ))}
                                {/* Load More Button - show if more orgs to display or more to fetch */}
                                {(displayCount < organizations.length ||
                                    !allOrganizationsLoaded) && (
                                    <div className="text-center mt-4 mb-4">
                                        <Button
                                            variant="primary"
                                            onClick={handleLoadMore}
                                            disabled={loading}
                                        >
                                            {loading ? 'Loading...' : 'Load More'}
                                        </Button>
                                    </div>
                                )}
                            </>
                        )}
                    </Container>
                </Col>
            </Row>
        </>
    );
};

export default Home;}

src/pages/Login/Login.tsx:
{
// import '../../styles/auth.css';
import AuthContext from '../../context/AuthContext';
import { useState, useContext } from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import { loginUser } from '../../context/AuthService';
import { ArrowLeft } from 'react-bootstrap-icons';

import FormContainer from '../../components/forms/FormContainer/FormContainer';
import AuthForm from '../../components/forms/AuthForm/AuthForm';
import FormInput from '../../components/forms/FormInput/FormInput';
import FormButton from '../../components/forms/FormButton/FormButton';
import NavButton from '../../components/navButton/NavButton';

const Login: React.FC = () => {
    const context = useContext(AuthContext);
    const navigate = useNavigate();

    const [credentials, setCredentials] = useState({
        email: '',
        password: '',
    });

    const [error, setError] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { id, value } = e.target;
        setCredentials(prev => ({
            ...prev,
            [id.replace('form', '').toLowerCase()]: value,
        }));
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        const { email, password } = credentials;

        if (!email || !password) {
            setError('Please fill in all fields');
            return;
        }
        setError(null);

        try {
            const response = await loginUser({ email, password });
            const token = response.data.data.token;
            const user = response.data.data.user;

            localStorage.setItem('token', token);
            localStorage.setItem('user', JSON.stringify(user));

            context?.setToken(token);
            context?.setUser(user);
            navigate('/');
        } catch (error) {
            console.error(error);
            setError('Login Failed.');
        }
    };

    return (
        <FormContainer>
            <NavLink to="/" className="back-button text-white">
                <ArrowLeft className="me-1" />
                Back to home
            </NavLink>
            <AuthForm title="PHOTOCOMP" onSubmit={handleSubmit} error={error}>
                <FormInput
                    id="formEmail"
                    type="email"
                    placeholder="Email"
                    value={credentials.email}
                    onChange={handleChange}
                    className="w-100 mb-3"
                    required
                />

                <FormInput
                    id="formPassword"
                    type="password"
                    placeholder="Password"
                    value={credentials.password}
                    onChange={handleChange}
                    className="w-100 mb-3"
                    required
                />

                <FormButton type="submit" variant="light">
                    Login
                </FormButton>

                <FormButton type="button" onClick={() => navigate('/register')}>
                    Don't have an account? Register
                </FormButton>
            </AuthForm>
        </FormContainer>
    );
};

export default Login;
}

src/pages/Login.tsx:
{
import '../styles/auth.css';
import AuthContext from '../context/AuthContext';
import { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { loginUser } from '../context/AuthService';

import FormContainer from '../components/forms/FormContainer';
import AuthForm from '../components/forms/AuthForm';
import FormInput from '../components/forms/FormInput';
import FormButton from '../components/forms/FormButton';

const Login: React.FC = () => {
    const context = useContext(AuthContext);
    const navigate = useNavigate();

    const [credentials, setCredentials] = useState({
        email: '',
        password: '',
    });

    const [error, setError] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { id, value } = e.target;
        setCredentials(prev => ({
            ...prev,
            [id.replace('form', '').toLowerCase()]: value,
        }));
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        const { email, password } = credentials;

        if (!email || !password) {
            setError('Please fill in all fields');
            return;
        }
        setError(null);

        try {
            const response = await loginUser({ email, password });
            const token = response.data.data.token;
            const user = response.data.data.user;

            localStorage.setItem('token', token);
            localStorage.setItem('user', JSON.stringify(user));

            context?.setToken(token);
            context?.setUser(user);
            navigate('/');
        } catch (error) {
            console.error(error);
            setError('Login Failed.');
        }
    };

    return (
        <FormContainer>
            <AuthForm title="PHOTOCOMP" onSubmit={handleSubmit} error={error}>
                <FormInput
                    id="formEmail"
                    type="email"
                    placeholder="Email"
                    value={credentials.email}
                    onChange={handleChange}
                    required
                />

                <FormInput
                    id="formPassword"
                    type="password"
                    placeholder="Password"
                    value={credentials.password}
                    onChange={handleChange}
                    required
                />

                <FormButton type="submit" variant="light">
                    Login
                </FormButton>

                <FormButton type="button" onClick={() => navigate('/register')}>
                    Don't have an account? Register
                </FormButton>
            </AuthForm>
        </FormContainer>
    );
};

export default Login;
}

src/pages/Logout.tsx:
{
import { useEffect, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import AuthContext from '../context/AuthContext';

const Logout: React.FC = () => {
    const { logout } = useContext(AuthContext);
    const navigate = useNavigate();

    useEffect(() => {
        logout();

        navigate('/login');
    }, [logout, navigate]);

    return null;
};

export default Logout;
}

src/pages/Members/Members.tsx:
{
import React, { useState, useEffect, useContext } from 'react';
import { NavLink, useParams } from 'react-router-dom';
import { Col, Row, Container, Alert } from 'react-bootstrap';
import AuthContext from '../../context/AuthContext';
import * as icon from 'react-bootstrap-icons';

import NavButton from '../../components/navButton/NavButton';
import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import MemberRow from '../../components/memberRow/MemberRow';
import { Member } from '../../components/cards/memberCard/MemberCard';
import {
    getOrganizationMembers,
    updateMember,
    removeMember,
    Role,
} from '../../context/MemberService';

const Members: React.FC = () => {
    const { user, token } = useContext(AuthContext);
    const { orgId } = useParams<{ orgId: string }>();

    const [searchTerm, setSearchTerm] = useState('');

    const [members, setMembers] = useState<Member[]>([]);
    const [filteredMembers, setFilteredMembers] = useState<Member[]>([]);

    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [actionSuccess, setActionSuccess] = useState<string | null>(null);

    const [processingAction, setProcessingAction] = useState<boolean>(false); // Setting a quasi mutex

    useEffect(() => {
        if (!orgId) return;

        const fetchMembers = async () => {
            try {
                setLoading(true);
                setError(null);
                const response = await getOrganizationMembers(orgId);
                setMembers(response.data.members);
                setFilteredMembers(response.data.members);

                setLoading(false);
            } catch (err) {
                console.error('Error fetching organization members:', err);
                setError('Failed to load organization members. Please try again later.');
                setLoading(false);
            }
        };

        fetchMembers();
    }, [orgId]);

    useEffect(() => {
        if (searchTerm.trim() === '') {
            setFilteredMembers(members);
        } else {
            const filtered = members.filter(member => {
                const { firstName, lastName, email } = member.userDetails;
                const fullName = `${firstName} ${lastName}`.toLowerCase();
                const username = email.split('@')[0].toLowerCase();
                const emailLower = email.toLowerCase();
                const search = searchTerm.toLowerCase();

                return (
                    fullName.includes(search) ||
                    username.includes(search) ||
                    emailLower.includes(search)
                );
            });
            setFilteredMembers(filtered);
        }
    }, [members, searchTerm]);

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
    };

    const adminMembers = filteredMembers.filter(member => member.role === 'ADMIN');
    const regularMembers = filteredMembers.filter(member => member.role === 'MEMBER');

    const handleUpdateMember = async (actionType: string, memberId: string) => {
        if (!orgId) return;

        try {
            setProcessingAction(true);
            setError(null);
            const organizationId = orgId.toLowerCase();

            if (actionType === 'promote') {
                await updateMember(organizationId, memberId, Role.Admin);
                setActionSuccess('Member successfully promoted to admin.');

                setMembers(prevMembers =>
                    prevMembers.map(member => {
                        if (member.userId === memberId) {
                            return { ...member, role: Role.Admin };
                        }
                        return member;
                    })
                );
            } else if (actionType === 'demote') {
                await updateMember(organizationId, memberId, Role.Member);
                setActionSuccess('Admin successfully demoted to member.');

                setMembers(prevMembers =>
                    prevMembers.map(member => {
                        if (member.userId === memberId) {
                            return { ...member, role: Role.Member };
                        }
                        return member;
                    })
                );
            } else if (actionType === 'remove') {
                await removeMember(organizationId, memberId);
                setActionSuccess('Member successfully removed from organization.');
                setMembers(prevMembers => prevMembers.filter(member => member.userId !== memberId));
            }

            setProcessingAction(false);
        } catch (err) {
            console.error(`Error performing action ${actionType} on member ${memberId}:`, err);
            setError(`Failed to ${actionType} member. Please try again.`);
            setProcessingAction(false);
        }
    };

    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search members..."
        />
    );

    /* Components to be injected into the TopBar*/
    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        <NavLink to="/account-settings" className="text-light top-bar-element">
                            <icon.GearFill size={24} />
                        </NavLink>
                        <NavLink to="/logout" className="text-light top-bar-element">
                            <icon.BoxArrowRight size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <TopBar searchComponent={searchComponent} rightComponents={rightComponents} />

                    <Container fluid className="px-4 py-3">
                        <div className="row-title">
                            <h1 className="mb-4 page-title">
                                Members: {orgId && orgId.charAt(0).toUpperCase() + orgId.slice(1)}
                            </h1>
                            <NavButton
                                className="requests-button"
                                to={`/organizations/${orgId}/members/requests`}
                            >
                                {' '}
                                Go to Requests{' '}
                            </NavButton>
                        </div>

                        {error && (
                            <Alert variant="danger" dismissible onClose={() => setError(null)}>
                                {error}
                            </Alert>
                        )}

                        {actionSuccess && (
                            <Alert
                                variant="success"
                                dismissible
                                onClose={() => setActionSuccess(null)}
                            >
                                {actionSuccess}
                            </Alert>
                        )}

                        {loading ? (
                            <div className="text-center p-5 text-white">
                                Loading organization members...
                            </div>
                        ) : filteredMembers.length === 0 ? (
                            <div className="text-center p-5 text-white">
                                {searchTerm
                                    ? 'No matching members found.'
                                    : 'No members in this organization.'}
                            </div>
                        ) : (
                            <>
                                {/* Admin Members Row */}
                                {adminMembers.length > 0 && (
                                    <MemberRow
                                        title="Admin Members"
                                        members={adminMembers}
                                        onAction={handleUpdateMember}
                                        actionTypes={['demote']}
                                        actionLabels={['Demote to Member']}
                                    />
                                )}

                                {/* Regular Members Row */}
                                {regularMembers.length > 0 && (
                                    <MemberRow
                                        title="Members"
                                        members={regularMembers}
                                        onAction={handleUpdateMember}
                                        actionTypes={['remove', 'promote']}
                                        actionLabels={['Remove Member', 'Promote to Admin']}
                                    />
                                )}
                            </>
                        )}
                    </Container>
                </Col>
            </Row>
        </>
    );
};

export default Members;
}

src/pages/Membership/Membership.tsx:
{
import React, { useState, useEffect, useContext } from 'react';
import { useParams, NavLink } from 'react-router-dom';
import { Col, Row, Container, Button, Alert } from 'react-bootstrap';
import * as icon from 'react-bootstrap-icons';
import AuthContext from '../../context/AuthContext';
import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import MembershipCard, {
    MembershipRequest,
} from '../../components/cards/membershipCard/MembershipCard';
import {
    getOrganizationMembershipRequests,
    acceptMembershipRequest,
    denyMembershipRequest,
} from '../../context/MembershipService';

const Membership: React.FC = () => {
    const { user, token } = useContext(AuthContext);
    const { orgId } = useParams<{ orgId: string }>();
    const [searchTerm, setSearchTerm] = useState('');
    const [requests, setRequests] = useState<MembershipRequest[]>([]);
    const [filteredRequests, setFilteredRequests] = useState<MembershipRequest[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [selectedRequestId, setSelectedRequestId] = useState<string | null>(null);
    const [processingRequest, setProcessingRequest] = useState<boolean>(false);
    const [actionSuccess, setActionSuccess] = useState<string | null>(null);

    useEffect(() => {
        if (!orgId) return;

        const fetchRequests = async () => {
            try {
                setLoading(true);
                setError(null);
                const response = await getOrganizationMembershipRequests(orgId);
                setRequests(response.data.requests);
                setLoading(false);
            } catch (err) {
                console.error('Error fetching membership requests:', err);
                setError('Failed to load membership requests. Please try again later.');
                setLoading(false);
            }
        };

        fetchRequests();
    }, [orgId]);

    useEffect(() => {
        if (searchTerm.trim() === '') {
            setFilteredRequests(requests);
        } else {
            const filtered = requests.filter(request => {
                const { firstName, lastName, email } = request.userDetails;
                const fullName = `${firstName} ${lastName}`.toLowerCase();
                const emailLower = email.toLowerCase();
                const search = searchTerm.toLowerCase();

                return (
                    fullName.includes(search) ||
                    emailLower.includes(search) ||
                    (request.message && request.message.toLowerCase().includes(search))
                );
            });
            setFilteredRequests(filtered);
        }
    }, [requests, searchTerm]);

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
    };

    const handleSelectRequest = (requestId: string) => {
        setSelectedRequestId(requestId === selectedRequestId ? null : requestId);
        setActionSuccess(null);
    };

    const handleAcceptRequest = async () => {
        if (!selectedRequestId || !orgId) return;

        try {
            setProcessingRequest(true);
            const organizationId = orgId.toLowerCase();
            await acceptMembershipRequest(organizationId, selectedRequestId);

            setRequests(prevRequests =>
                prevRequests.filter(request => {
                    const requestUserId = request.SK.split('#')[1] || request.userId;
                    return requestUserId !== selectedRequestId;
                })
            );

            setSelectedRequestId(null);
            setActionSuccess('Membership request accepted successfully.');
            setProcessingRequest(false);
        } catch (err) {
            console.error('Error accepting request:', err);
            setError('Failed to accept membership request. Please try again.');
            setProcessingRequest(false);
        }
    };

    const handleDenyRequest = async () => {
        if (!selectedRequestId || !orgId) return;

        try {
            setProcessingRequest(true);
            const organizationId = orgId.toLowerCase();
            await denyMembershipRequest(organizationId, selectedRequestId);

            setRequests(prevRequests =>
                prevRequests.filter(request => {
                    const requestUserId = request.SK.split('#')[1] || request.userId;
                    return requestUserId !== selectedRequestId;
                })
            );

            setSelectedRequestId(null);
            setActionSuccess('Membership request denied successfully.');
            setProcessingRequest(false);
        } catch (err) {
            console.error('Error denying request:', err);
            setError('Failed to deny membership request. Please try again.');
            setProcessingRequest(false);
        }
    };

    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search membership requests..."
        />
    );

    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        <NavLink to="/account-settings" className="text-light top-bar-element">
                            <icon.GearFill size={24} />
                        </NavLink>
                        <NavLink to="/logout" className="text-light top-bar-element">
                            <icon.BoxArrowRight size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <TopBar searchComponent={searchComponent} rightComponents={rightComponents} />

                    <Container fluid className="px-4 py-3">
                        <div className="row-title">
                            <h1 className="mb-4 page-title">
                                Requests: {orgId && orgId.charAt(0).toUpperCase() + orgId.slice(1)}
                            </h1>
                            <NavButton
                                className="members-button"
                                to={`/organizations/${orgId}/members`}
                            >
                                {' '}
                                Go to Members{' '}
                            </NavButton>
                        </div>

                        {error && (
                            <Alert variant="danger" dismissible onClose={() => setError(null)}>
                                {error}
                            </Alert>
                        )}

                        {actionSuccess && (
                            <Alert
                                variant="success"
                                dismissible
                                onClose={() => setActionSuccess(null)}
                            >
                                {actionSuccess}
                            </Alert>
                        )}

                        {loading ? (
                            <div className="text-center p-5 text-white">
                                Loading membership requests...
                            </div>
                        ) : filteredRequests.length === 0 ? (
                            <div className="text-center p-5 text-white">
                                {searchTerm
                                    ? 'No matching requests found.'
                                    : 'No pending membership requests.'}
                            </div>
                        ) : (
                            <>
                                <div className="d-flex flex-wrap gap-4 mb-4">
                                    {filteredRequests.map(request => (
                                        <MembershipCard
                                            key={request.userId}
                                            request={request}
                                            isSelected={selectedRequestId === request.userId}
                                            onSelect={handleSelectRequest}
                                        />
                                    ))}
                                </div>

                                {selectedRequestId && (
                                    <div className="action-buttons mt-3 d-flex gap-3">
                                        <Button
                                            variant="success"
                                            onClick={handleAcceptRequest}
                                            disabled={processingRequest}
                                        >
                                            {processingRequest ? 'Processing...' : 'Accept Request'}
                                        </Button>
                                        <Button
                                            variant="danger"
                                            onClick={handleDenyRequest}
                                            disabled={processingRequest}
                                        >
                                            {processingRequest ? 'Processing...' : 'Deny Request'}
                                        </Button>
                                    </div>
                                )}
                            </>
                        )}
                    </Container>
                </Col>
            </Row>
        </>
    );
};

export default Membership;
}

src/pages/Organizations/CreateOrganization/CreateOrganization.tsx:
{
import React, { useState, useContext } from 'react';
import { Container, Form, Button, Row, Col, Alert } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { createOrganization } from '../../../context/OrgService';
import AuthContext from '../../../context/AuthContext';
import * as icon from 'react-bootstrap-icons';

// Import components
import Sidebar from '../../../components/bars/SideBar/SideBar';
import TopBar from '../../../components/bars/TopBar/TopBar';
import SearchBar from '../../../components/bars/SearchBar/SearchBar';
import NavButton from '../../../components/navButton/NavButton';
import { NavLink } from 'react-router-dom';

interface OrganizationData {
    name: string;
    description?: string;
    logo: File | null;
}

const CreateOrganization: React.FC = () => {
    const navigate = useNavigate();
    const { user, token } = useContext(AuthContext);
    const [organizationData, setOrganizationData] = useState<OrganizationData>({
        name: '',
        description: '',
        logo: null,
    });
    const [previewUrl, setPreviewUrl] = useState<string | null>(null);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');

    const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setOrganizationData({
            ...organizationData,
            name: e.target.value,
        });
    };

    const handleDescriptionChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
        setOrganizationData({
            ...organizationData,
            description: e.target.value,
        });
    };

    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files[0]) {
            const file = e.target.files[0];

            // Check file type
            if (!file.type.match('image.*')) {
                setError('Please select an image file');
                return;
            }

            // Check file size (e.g., limit to 5MB)
            if (file.size > 5 * 1024 * 1024) {
                setError('File size should not exceed 5MB');
                return;
            }

            setOrganizationData({
                ...organizationData,
                logo: file,
            });

            // Create preview URL
            const reader = new FileReader();
            reader.onload = () => {
                setPreviewUrl(reader.result as string);
            };
            reader.readAsDataURL(file);

            setError(null);
        }
    };

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
    };

    /* Components to be injected into the TopBar*/
    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search organizations..."
            className="ms-3"
        />
    );

    /* Components to be injected into the TopBar*/
    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        <NavLink to="/account-settings" className="text-light top-bar-element">
                            <icon.GearFill size={24} />
                        </NavLink>
                        <NavLink to="/logout" className="text-light top-bar-element">
                            <icon.BoxArrowRight size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();

        // Form validation
        if (!organizationData.name.trim()) {
            setError('Organization name is required');
            return;
        }

        if (!organizationData.logo) {
            setError('Organization logo is required');
            return;
        }

        setIsSubmitting(true);
        setError(null);

        // Create form data for file upload
        const formData = new FormData();
        formData.append('name', organizationData.name);

        if (organizationData.description) {
            formData.append('description', organizationData.description);
        }

        if (organizationData.logo) {
            formData.append('logo', organizationData.logo);
        }

        try {
            // Make API call to create organization
            const response = await createOrganization(formData);
            console.log('Organization created successfully:', response);

            setSuccess('Organization created successfully!');

            // Redirect to organizations page after a short delay
            setTimeout(() => {
                navigate('/organizations');
            }, 1500);
        } catch (error: any) {
            console.error('Error creating organization:', error);

            // Handle specific error messages from the API
            if (error.response && error.response.data && error.response.data.message) {
                setError(error.response.data.message);
            } else {
                setError('Failed to create organization. Please try again.');
            }
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <div className="sticky-top bg-dark z-3">
                        <Row>
                            <TopBar
                                searchComponent={searchComponent}
                                rightComponents={rightComponents}
                            />
                        </Row>
                    </div>
                    <div className="create-organization-page bg-dark text-light min-vh-100">
                        {/* Main Content */}
                        <Container fluid className="px-4 pt-4">
                            <Row className="justify-content-center">
                                <Col xs={12} md={8} lg={6}>
                                    <h1
                                        className="text-center mb-5"
                                        style={{ fontFamily: 'Michroma, sans-serif' }}
                                    >
                                        Organizations
                                    </h1>

                                    <div className="text-center mb-5">
                                        <h2
                                            className="fs-1"
                                            style={{ fontFamily: 'Michroma, sans-serif' }}
                                        >
                                            Start to create your Organization below!
                                        </h2>
                                    </div>

                                    {error && (
                                        <Alert variant="danger" className="my-3">
                                            {error}
                                        </Alert>
                                    )}

                                    {success && (
                                        <Alert variant="success" className="my-3">
                                            {success}
                                        </Alert>
                                    )}

                                    <Form onSubmit={handleSubmit}>
                                        <Form.Group className="mb-4" controlId="organizationName">
                                            <Form.Label
                                                style={{ fontFamily: 'Michroma, sans-serif' }}
                                                className="fs-4"
                                            >
                                                Organization Name
                                            </Form.Label>
                                            <Form.Control
                                                type="text"
                                                placeholder="Enter organization name"
                                                value={organizationData.name}
                                                onChange={handleNameChange}
                                                className="bg-white border-secondary py-3"
                                                required
                                            />
                                        </Form.Group>

                                        <Form.Group
                                            className="mb-4"
                                            controlId="organizationDescription"
                                        >
                                            <Form.Label
                                                style={{ fontFamily: 'Michroma, sans-serif' }}
                                                className="fs-4"
                                            >
                                                Organization Description
                                            </Form.Label>
                                            <Form.Control
                                                as="textarea"
                                                rows={4}
                                                placeholder="Enter organization description"
                                                value={organizationData.description}
                                                onChange={handleDescriptionChange}
                                                className="bg-white border-secondary py-3"
                                            />
                                        </Form.Group>

                                        <Form.Group className="mb-4" controlId="organizationLogo">
                                            <Form.Label
                                                style={{ fontFamily: 'Michroma, sans-serif' }}
                                                className="fs-4"
                                            >
                                                Upload your Organization logo
                                            </Form.Label>

                                            {previewUrl && (
                                                <div className="mb-3 text-center">
                                                    <img
                                                        src={previewUrl}
                                                        alt="Logo preview"
                                                        style={{
                                                            maxHeight: '200px',
                                                            maxWidth: '100%',
                                                        }}
                                                        className="border rounded"
                                                    />
                                                </div>
                                            )}

                                            {/* File upload wrapper with controlled width */}
                                            <div>
                                                <div style={{ width: '66.7%' }}>
                                                    {' '}
                                                    {/* This makes it 2/3 width */}
                                                    <Form.Control
                                                        type="file"
                                                        onChange={handleFileChange}
                                                        accept="image/*"
                                                        className="bg-white text-dark border-secondary rounded-3"
                                                        required
                                                    />
                                                </div>
                                            </div>
                                        </Form.Group>

                                        <div
                                            className="position-relative p-3 mt-5 pt-5"
                                            style={{ height: '250px', zIndex: 1100 }}
                                        >
                                            <div
                                                className="position-absolute"
                                                style={{
                                                    left: '-200px',
                                                    top: '200px',
                                                    zIndex: 1100,
                                                }}
                                            >
                                                <Button
                                                    variant="secondary"
                                                    onClick={() => navigate('/organizations')}
                                                    disabled={isSubmitting}
                                                    className="py-2 px-4"
                                                >
                                                    Cancel
                                                </Button>
                                            </div>

                                            <div
                                                className="position-absolute"
                                                style={{
                                                    right: '-200px',
                                                    top: '200px',
                                                    zIndex: 1100,
                                                }}
                                            >
                                                <Button
                                                    variant="secondary"
                                                    type="submit"
                                                    disabled={isSubmitting}
                                                    className="py-2 px-4"
                                                >
                                                    {isSubmitting
                                                        ? 'Creating...'
                                                        : 'Create Organization'}
                                                </Button>
                                            </div>
                                        </div>
                                    </Form>
                                </Col>
                            </Row>
                        </Container>
                    </div>
                </Col>
            </Row>
        </>
    );
};

export default CreateOrganization;
}

src/pages/Organizations/OrganizationDetails.tsx:
{
import React, { useState, useEffect, useContext, useRef } from 'react';
import { Container, Form, Button, Row, Col, Alert, Spinner } from 'react-bootstrap';
import { useParams, useNavigate, NavLink } from 'react-router-dom';
import { getPublicOrganizations, updateOrganization, Organization } from '../../context/OrgService';
import { isMemberOfOrg } from '../../context/AuthService';

import AuthContext from '../../context/AuthContext';
import * as icon from 'react-bootstrap-icons';

import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';

const OrganizationDetails: React.FC = () => {
    const { id: organizationId } = useParams();
    const navigate = useNavigate();
    const { user } = useContext(AuthContext);

    const fetchedRef = useRef(false);
    const [organization, setOrganization] = useState<Organization | null>(null);
    const [orgRole, setOrgRole] = useState<string | null>(null);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [searchTerm, setSearchTerm] = useState('');
    const isAdmin = orgRole === 'ADMIN';
    const [formData, setFormData] = useState({
        description: '',
        contactEmail: '',
        website: '',
        logo: null as File | null,
    });
    const [previewUrl, setPreviewUrl] = useState<string | null>(null);
    const [isSubmitting, setIsSubmitting] = useState(false);

    useEffect(() => {
        if (fetchedRef.current || !organizationId) return;
        fetchedRef.current = true;
        fetchOrganization();
        checkMembership();
    }, [organizationId]);

    const fetchOrganization = async () => {
        if (!organizationId) return;

        try {
            let page = 1;
            let foundOrg: Organization | undefined;
            const maxPages = 100;

            while (page <= maxPages) {
                const response = await getPublicOrganizations(page as unknown as string);
                const orgs = response?.data?.organizations;
                if (!orgs || orgs.length === 0) break;

                foundOrg = orgs.find(
                    (org: Organization) => org.name.toLowerCase() === organizationId.toLowerCase()
                );
                if (foundOrg) break;

                page++;
            }

            if (!foundOrg) {
                setError('Organization not found');
                return;
            }

            setOrganization(foundOrg);
            setFormData({
                description: foundOrg.description || '',
                contactEmail: foundOrg.contactEmail || '',
                website: foundOrg.website || '',
                logo: null,
            });
            if (foundOrg.logoUrl) {
                setPreviewUrl(foundOrg.logoUrl);
            }
        } catch (err) {
            console.error('Error fetching organization details:', err);
            setError('Failed to load organization details. Please try again.');
        }
    };

    const checkMembership = async () => {
        if (!organizationId || !user?.id) return;

        try {
            const res = await isMemberOfOrg(user.id, organizationId);
            const role = res?.data?.data?.membership?.role;
            setOrgRole(role);
        } catch (err) {
            setOrgRole(null);
        }
    };

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files[0]) {
            const file = e.target.files[0];

            if (!file.type.match('image.*')) {
                setError('Please select an image file');
                return;
            }

            if (file.size > 5 * 1024 * 1024) {
                setError('File size should not exceed 5MB');
                return;
            }

            setFormData(prev => ({ ...prev, logo: file }));

            const reader = new FileReader();
            reader.onload = () => {
                const result = reader.result as string;
                setPreviewUrl(result);
            };
            reader.readAsDataURL(file);

            setError(null);
        }
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!organizationId) return;

        setIsSubmitting(true);
        setError(null);

        try {
            const updateData = new FormData();
            updateData.append('description', formData.description);
            updateData.append('contactEmail', formData.contactEmail);
            updateData.append('website', formData.website);
            if (formData.logo) {
                updateData.append('logo', formData.logo);
            }

            await updateOrganization(organizationId, updateData);

            const refreshResponse = await getPublicOrganizations();
            const refreshedOrg = refreshResponse.data.organizations.find(
                (org: Organization) => org.id === organizationId
            );

            if (refreshedOrg) {
                setOrganization(refreshedOrg);
                setFormData({
                    description: refreshedOrg.description || '',
                    contactEmail: refreshedOrg.contactEmail || '',
                    website: refreshedOrg.website || '',
                    logo: null,
                });
                setPreviewUrl(refreshedOrg.logoUrl || null);
            }

            setSuccess('Organization updated successfully!');
            navigate(-1);
        } catch (err) {
            console.error('Error updating organization:', err);
            setError('Failed to update organization. Please try again.');
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent) => {
        e.preventDefault();
    };

    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search organizations..."
            className="ms-3"
        />
    );

    const rightComponents = (
        <div className="d-flex align-items-center gap-3">
                        
            {user ? (
                <>
                    <NavLink to="/account-settings" className="text-light top-bar-element">
                        <icon.GearFill size={24} />
                    </NavLink>
                    <NavLink to="/logout" className="text-light top-bar-element">
                        <icon.BoxArrowRight size={24} />
                    </NavLink>
                </>
            ) : (
                <>
                    <NavButton
                        to="/register"
                        variant="outline-light"
                        className="mx-1 top-bar-element"
                    >
                        Register
                    </NavButton>
                    <NavButton to="/login" variant="outline-light" className="top-bar-element">
                        Login
                    </NavButton>
                </>
            )}
        </div>
    );

    return (
        <Row className="g-0">
            <Col md="auto" className="sidebar-container">
                <Sidebar />
            </Col>
            <Col className="main-content p-0">
                <div className="sticky-top bg-dark z-3">
                    <TopBar searchComponent={searchComponent} rightComponents={rightComponents} />
                </div>
    
                <Container fluid className="px-4 pt-4 bg-dark text-light min-vh-100">
                    <div className="organization-details-page bg-dark text-light min-vh-100">
                        {error ? (
                            <>
                                <Alert variant="danger" className="my-4">
                                    {error}
                                </Alert>
                                <Button variant="secondary" onClick={() => navigate('/organizations')}>
                                    Back to Organizations
                                </Button>
                            </>
                        ) : (
                            <Form onSubmit={handleSubmit}>
                                <Row className="align-items-center mb-4 justify-content-center">
                                    <h2 style={{ fontFamily: 'Michroma, sans-serif' }}>
                                        Organization Details
                                    </h2>
                                </Row>
                                <Row>
                                    <Col md={8} lg={6}>
                                        <Form.Group controlId="organizationName">
                                            <Form.Label>Organization Name</Form.Label>
                                            <Form.Control
                                                type="text"
                                                value={organization?.name || ''}
                                                readOnly
                                                plaintext
                                                className="text-light bg-dark border-0"
                                            />
                                        </Form.Group>

                                        <Form.Group className="mb-3" controlId="description">
                                            <Row className="align-items-center">
                                                <Col md={4}>
                                                    <Form.Label>Description</Form.Label>
                                                </Col>
                                                <Col md={8}>
                                                    {isAdmin ? (
                                                        <Form.Control
                                                            as="textarea"
                                                            rows={3}
                                                            name="description"
                                                            value={formData.description}
                                                            onChange={handleInputChange}
                                                            placeholder="Enter organization description"
                                                            className="bg-dark text-light border-secondary"
                                                        />
                                                    ) : (
                                                        <Form.Control
                                                            as="textarea"
                                                            rows={3}
                                                            readOnly
                                                            value={formData.description}
                                                            plaintext
                                                            className="bg-dark text-light border-0"
                                                        />
                                                    )}
                                                </Col>
                                            </Row>
                                        </Form.Group>

                                        <Form.Group className="mb-3" controlId="contactEmail">
                                            <Row className="align-items-center">
                                                <Col md={4}>
                                                    <Form.Label>Contact Email</Form.Label>
                                                </Col>
                                                <Col md={8}>
                                                    {isAdmin ? (
                                                        <Form.Control
                                                            type="email"
                                                            name="contactEmail"
                                                            value={formData.contactEmail}
                                                            onChange={handleInputChange}
                                                            placeholder="Enter contact email"
                                                            className="bg-dark text-light border-secondary"
                                                        />
                                                    ) : (
                                                        <Form.Control
                                                            type="email"
                                                            readOnly
                                                            plaintext
                                                            value={formData.contactEmail}
                                                            className="bg-dark text-light border-0"
                                                        />
                                                    )}
                                                </Col>
                                            </Row>
                                        </Form.Group>

                                        <Form.Group className="mb-3" controlId="website">
                                            <Row className="align-items-center">
                                                <Col md={4}>
                                                    <Form.Label>Website</Form.Label>
                                                </Col>
                                                <Col md={8}>
                                                    {isAdmin ? (
                                                        <Form.Control
                                                            type="url"
                                                            name="website"
                                                            value={formData.website}
                                                            onChange={handleInputChange}
                                                            placeholder="Enter website URL"
                                                            className="bg-dark text-light border-secondary"
                                                        />
                                                    ) : (
                                                        <Form.Control
                                                            type="url"
                                                            readOnly
                                                            plaintext
                                                            value={formData.website}
                                                            className="bg-dark text-light border-0"
                                                        />
                                                    )}
                                                </Col>
                                            </Row>
                                        </Form.Group>
                                    </Col>
                                    <Col md={4} className="text-end">
                                        {previewUrl ? (
                                            <img
                                                src={previewUrl}
                                                alt="Logo Preview"
                                                className="img-fluid rounded"
                                                style={{ maxHeight: '150px' }}
                                            />
                                        ) : (
                                            <div className="p-3 bg-secondary text-center rounded">
                                                <icon.Image size={48} />
                                                <p className="mt-2">No logo available</p>
                                            </div>
                                        )}
                                        {isAdmin && (
                                            <Form.Control
                                                type="file"
                                                onChange={handleFileChange}
                                                accept="image/*"
                                                className="mt-2 bg-dark text-light border-secondary"
                                            />
                                        )}
                                    </Col>
                                </Row>

                                

                                <div className="d-flex justify-content-between mt-4">
                                    <Button
                                        variant="outline-light custom-create-button"
                                        onClick={() => navigate(-1)}
                                    >
                                        {isAdmin ? 'Cancel' : `Back to ${organizationId}`}
                                    </Button>
                                    
                                    {isAdmin && (
                                        <>
                                            <Button
                                                variant="secondary"
                                                type="submit"
                                                disabled={isSubmitting}
                                            >
                                                {isSubmitting ? (
                                                    <>
                                                        <Spinner
                                                            as="span"
                                                            animation="border"
                                                            size="sm"
                                                            role="status"
                                                            className="me-2"
                                                        />
                                                        Updating...
                                                    </>
                                                ) : (
                                                    'Update Organization'
                                                )}
                                            </Button>
                                        </>
                                    )}
                                </div>
                            </Form>
                        )}
                    </div>
                </Container>
            </Col>
        </Row>
    );
};    

export default OrganizationDetails;
}

src/pages/Organizations/ViewOrganizations.tsx:
{
import React, { useState, useEffect, useRef, useContext } from 'react';
import { Button, Col, Row, Container, Alert } from 'react-bootstrap';
import * as icon from 'react-bootstrap-icons';
import { NavLink } from 'react-router-dom';
import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import GalleryCard from '../../components/cards/galleryCard/GalleryCard';
import { Organization, getPublicOrganizations } from '../../context/OrgService';
import AuthContext from '../../context/AuthContext';

const Organizations: React.FC = () => {
    const { user, token } = useContext(AuthContext);
    const [searchTerm, setSearchTerm] = useState('');
    const [organizations, setOrganizations] = useState<Organization[]>([]);
    const [filteredOrganizations, setFilteredOrganizations] = useState<Organization[]>([]);
    const [lastEvaluatedKey, setLastEvaluatedKey] = useState<string | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    const [hasMore, setHasMore] = useState<boolean>(true);
    const fetchedRef = useRef(false);

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
    };

    /* Components to be injected into the TopBar*/
    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search organizations..."
            className="ms-3"
        />
    );

    /* Components to be injected into the TopBar*/
    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        {/* Create Organization should only appear when a user is logged in */}
                        <NavButton
                            to="/organizations/create"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Create Organization
                        </NavButton>
                        <NavLink to="/account-settings" className="text-light top-bar-element">
                            <icon.GearFill size={24} />
                        </NavLink>
                        <NavLink to="/logout" className="text-light top-bar-element">
                            <icon.BoxArrowRight size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    const fetchOrganizations = async (key: string | undefined = undefined) => {
        setLoading(true);
        try {
            const orgs = await getPublicOrganizations(key);
            if (key) {
                setOrganizations(prev => [...prev, ...orgs.data.organizations]);
            } else {
                setOrganizations(orgs.data.organizations);
            }
            setLastEvaluatedKey(orgs.lastEvaluatedKey); // update for next fetch
            setHasMore(orgs.lastEvaluatedKey !== null); // if there's no more key, no more data
            setLoading(false);
        } catch (err) {
            setError('Failed to fetch organizations');
            setLoading(false);
        }
    };

    useEffect(() => {
        if (fetchedRef.current) return;
        fetchedRef.current = true;
        fetchOrganizations();
        
        // Set up a timer to refresh organizations every 45 minutes to get fresh presigned URLs
        // This is less than the typical 1-hour expiration time for presigned URLs
        const refreshInterval = setInterval(() => {
            console.log("Refreshing organization data to update presigned URLs");
            fetchOrganizations();
        }, 45 * 60 * 1000); // 45 minutes in milliseconds
        
        // Cleanup the interval when component unmounts
        return () => clearInterval(refreshInterval);
    }, []);

    useEffect(() => {
        if (searchTerm.trim() === '') {
            setFilteredOrganizations(organizations);
        } else {
            const filtered = organizations.filter(org => {
                const nameMatch = org.name.toLowerCase().includes(searchTerm.toLowerCase());
                const descMatch =
                    org.description?.toLowerCase().includes(searchTerm.toLowerCase()) || false;
                return nameMatch || descMatch;
            });
            setFilteredOrganizations(filtered);
        }
    }, [organizations, searchTerm]);

    const handleLoadMore = () => {
        if (!loading && hasMore) {
            fetchOrganizations(lastEvaluatedKey ?? undefined);
        }
    };

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <div className="sticky-top bg-dark z-3">
                        <Row>
                            <TopBar
                                searchComponent={searchComponent}
                                rightComponents={rightComponents}
                            />
                        </Row>
                    </div>
                    <div className="p-3 bg-dark text-white">
                        <Container fluid>
                            <Row>
                                <Col>
                                    <h1 className="mb-4">Organizations</h1>
                                </Col>
                            </Row>
                            {error && <Alert variant="danger">{error}</Alert>}
                            <Row>
                                {loading && organizations.length === 0 ? (
                                    <div className="text-center p-5">Loading organizations...</div>
                                ) : filteredOrganizations.length === 0 ? (
                                    <div className="text-center p-5">
                                        {searchTerm
                                            ? 'No matching organizations found.'
                                            : 'No organizations available.'}
                                        {user && token && (
                                            <div className="mt-4">
                                                <Button
                                                    variant="primary"
                                                    as={NavLink}
                                                    to="/organizations/create"
                                                >
                                                    Create Your First Organization
                                                </Button>
                                            </div>
                                        )}
                                    </div>
                                ) : (
                                    <div className="d-flex flex-wrap gap-4">
                                        {filteredOrganizations.map(org => (
                                            <div key={org.id}>
                                                <GalleryCard
                                                    item={org}
                                                    className="organization-card"
                                                    orgName={org.name}
                                                />
                                            </div>
                                        ))}
                                    </div>
                                )}
                            </Row>
                            {hasMore && organizations.length > 0 && (
                                <Row className="mt-4">
                                    <Col className="text-center">
                                        <Button
                                            onClick={handleLoadMore}
                                            disabled={loading}
                                            variant="primary"
                                        >
                                            {loading ? 'Loading...' : 'Load More'}
                                        </Button>
                                    </Col>
                                </Row>
                            )}
                        </Container>
                    </div>
                </Col>
            </Row>
        </>
    );
};

export default Organizations;}

src/pages/Organizations.tsx:
{
import React, { useState } from 'react';
import { Col, Row, Container } from 'react-bootstrap';
import { BellFill, PersonCircle } from 'react-bootstrap-icons';

import Sidebar from '../components/bars/SideBar/SideBar';
import TopBar from '../components/bars/TopBar/TopBar';
import SearchBar from '../components/bars/SearchBar/SearchBar';
import NavButton from '../components/navButton/NavButton';
import Gallery from '../components/Gallery';

const items = [
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
    {
        id: 'NAME',
        name: 'name',
        description: 'Some random description',
        logoUrl: 'https://picsum.photos/300/200',
        PK: 'ORG#NAME',
    },
];

const Organizations = () => {
    const [searchTerm, setSearchTerm] = useState('');

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        console.log('Search submitted:', searchTerm);
        // searching
    };

    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search organizations..."
        />
    );

    const rightComponents = (
        <>
            <NavButton to="/register" variant="outline-light" className="mx-2 top-bar-element">
                Register
            </NavButton>
            <NavButton to="/login" variant="outline-light" className="top-bar-element">
                Login
            </NavButton>
            <BellFill className="text-light m-2 top-bar-element" size={24} />
            <PersonCircle className="text-light m-2 top-bar-element" size={24} />
        </>
    );

    return (
        <>
            <Row className="g-0">
                <Col md="auto">
                    <Sidebar />
                </Col>
                <Col>
                    <TopBar searchComponent={searchComponent} rightComponents={rightComponents} />

                    <Container fluid className="px-4 py-3">
                        <h1 className="mb-4">Organizations</h1>
                        <Gallery items={items} useNewCard={true} />
                    </Container>
                </Col>
            </Row>
        </>
    );
};

export default Organizations;
}

src/pages/PhotoGallery/PhotoGalleryPage.tsx:
{
import React, { useState, useEffect, useContext } from 'react';
import { Container, Row, Col, Button, Dropdown } from 'react-bootstrap';
import { Search, Download, Heart, PersonCircle, Grid3x3Gap, X } from 'react-bootstrap-icons';
import PhotoCarousel from '../../components/PhotoCarousel/PhotoCarousel';
import axios from 'axios';
import { useParams, useNavigate, NavLink } from 'react-router-dom';
import * as icon from 'react-bootstrap-icons';
import { getAllPhotos, Photo, getPhotoDownloadUrl } from '../../context/PhotoService';
import { getPublicOrganizationEvents } from '../../context/OrgService';

// Import navigation components
import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import AuthContext from '../../context/AuthContext';

interface Organization {
    name: string;
    id: string;
    description?: string;
}

interface Event {
    id: string;
    title: string;
    description?: string;
    date: string;
}

const PhotoGalleryPage: React.FC = () => {
    const navigate = useNavigate();
    const { id: orgId, eid: eventId, photoId } = useParams();
    const { user, token } = useContext(AuthContext);

    // State for selected organization and event
    const [organizations, setOrganizations] = useState<Organization[]>([]);
    const [events, setEvents] = useState<Event[]>([]);
    const [selectedOrg, setSelectedOrg] = useState<string>(orgId || 'GalleryTestOrg');
    const [selectedEvent, setSelectedEvent] = useState<string>(
        eventId || '3dcf897f-7bcf-4ac7-b38f-860a41615223'
    );
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [photos, setPhotos] = useState<Photo[]>([]);
    const [currentPhotoIndex, setCurrentPhotoIndex] = useState<number>(0);
    const [eventInfo, setEventInfo] = useState<Event | null>(null);
    const [loadingEvent, setLoadingEvent] = useState<boolean>(true);

    // Fetch photos for the current organization and event
    useEffect(() => {
        if (selectedOrg && selectedEvent) {
            const fetchPhotos = async () => {
                try {
                    const response = await getAllPhotos(selectedOrg, selectedEvent);
                    if (response.data.photos) {
                        setPhotos(response.data.photos);
                    }
                } catch (error) {
                    console.error('Error fetching photos:', error);
                }
            };

            fetchPhotos();
        }
    }, [selectedOrg, selectedEvent]);

    // Fetch event details
    useEffect(() => {
        if (selectedOrg && selectedEvent) {
            const fetchEventDetails = async () => {
                try {
                    setLoadingEvent(true);
                    const response = await getPublicOrganizationEvents(selectedOrg);
                    const event = response.data.events.find((e: Event) => e.id === selectedEvent);

                    if (event) {
                        setEventInfo(event);
                    }

                    setLoadingEvent(false);
                } catch (err) {
                    console.error('Error fetching event details:', err);
                    setLoadingEvent(false);
                }
            };

            fetchEventDetails();
        }
    }, [selectedOrg, selectedEvent]);

    // Find the index of the selected photo in the photo list when photos are loaded
    useEffect(() => {
        if (photos.length > 0 && photoId) {
            const index = photos.findIndex(photo => photo.id === photoId);
            if (index !== -1) {
                setCurrentPhotoIndex(index);
            }
        }
    }, [photos, photoId]);

    // Update the current photo index when the carousel changes
    const handleCarouselChange = (index: number) => {
        setCurrentPhotoIndex(index);

        // Update URL to reflect the current photo without reload
        if (photos.length > index) {
            const currentPhotoId = photos[index].id;
            window.history.replaceState(
                null,
                '',
                `/organizations/${selectedOrg}/events/${selectedEvent}/photos/${currentPhotoId}`
            );
        }
    };

    // Fetch organizations when component mounts
    useEffect(() => {
        const fetchOrganizations = async () => {
            setLoading(true);

            try {
                const token = localStorage.getItem('token');
                const axiosInstance = axios.create({
                    baseURL: 'http://localhost:3000',
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                });

                // Only fetch organizations if we don't have the orgId from URL params
                if (!orgId) {
                    const response = await axiosInstance.get('/organizations');

                    if (response.data?.org) {
                        setOrganizations(
                            response.data.org.map((org: any) => ({
                                name: org.organizationName,
                                id: org.organizationName,
                                description: `Organization: ${org.organizationName}`,
                            }))
                        );
                    }
                }
            } catch (err) {
                console.error('Error fetching organizations:', err);
                setError('Could not fetch organizations');

                // For testing - provide fallback data if API fails
                setOrganizations([
                    {
                        name: selectedOrg,
                        id: selectedOrg,
                        description: 'Organization',
                    },
                ]);
            } finally {
                setLoading(false);
            }
        };

        fetchOrganizations();
    }, [orgId, selectedOrg]);

    // Fetch events when selected organization changes
    useEffect(() => {
        const fetchEvents = async () => {
            if (!selectedOrg) return;

            setLoading(true);

            try {
                const token = localStorage.getItem('token');
                const axiosInstance = axios.create({
                    baseURL: 'http://localhost:3000',
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                });

                // Only fetch events if we don't have the eventId from URL params
                if (!eventId) {
                    const response = await axiosInstance.get(
                        `/organizations/${selectedOrg}/events`
                    );

                    if (response.data?.data?.events) {
                        setEvents(
                            response.data.data.events.map((event: any) => ({
                                id: event.id,
                                title: event.title,
                                description: event.description,
                                date: event.date,
                            }))
                        );

                        // If we have events, select the first one by default
                        if (response.data.data.events.length > 0 && !selectedEvent) {
                            setSelectedEvent(response.data.data.events[0].id);
                        }
                    }
                }
            } catch (err) {
                console.error('Error fetching events:', err);
                setError('Could not fetch events');

                // For testing - provide fallback data if API fails
                setEvents([
                    {
                        id: selectedEvent,
                        title: 'Event',
                        description: 'Event for Gallery',
                        date: new Date().toISOString(),
                    },
                ]);
            } finally {
                setLoading(false);
            }
        };

        fetchEvents();
    }, [selectedOrg, eventId, selectedEvent]);

    const handleOrgChange = (orgName: string) => {
        setSelectedOrg(orgName);
        navigate(`/organizations/${orgName}/events`);
    };

    const handleEventChange = (eventId: string) => {
        setSelectedEvent(eventId);
        navigate(`/organizations/${selectedOrg}/events/${eventId}/photos`);
    };

    const handleBackToGallery = () => {
        navigate(`/organizations/${selectedOrg}/events/${selectedEvent}/photos`);
    };

    // Handle download of the current image
    const handleDownload = async () => {
        if (photos.length === 0 || currentPhotoIndex >= photos.length) {
            console.error('No photo available for download');
            return;
        }

        const currentPhoto = photos[currentPhotoIndex];
        if (!currentPhoto.id) {
            console.error('Photo ID is missing');
            return;
        }

        try {
            // Use the updated download function that gets a pre-signed URL
            const response = await getPhotoDownloadUrl(
                selectedOrg,
                selectedEvent,
                currentPhoto.id,
                'original' // Always download the original size
            );

            if (response.data.downloadUrl) {
                // Create a temporary anchor element to trigger the download
                const link = document.createElement('a');
                link.href = response.data.downloadUrl;

                // Append to body, click, and remove
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            } else {
                throw new Error('Download URL not found in response');
            }
        } catch (error) {
            console.error('Error downloading photo:', error);
            alert('Failed to download photo. Please try again.');
        }
    };

    // Search functionality
    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        // Implement search logic if needed
    };

    // TopBar components
    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search photos..."
            className="ms-3"
        />
    );

    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {user && token ? (
                    <>
                        {/* Download button */}
                        <Button
                            variant="secondary"
                            className="top-bar-element d-flex align-items-center gap-1"
                            onClick={handleDownload}
                        >
                            <icon.Download size={20} />
                            <span className="d-none d-md-inline">Download</span>
                        </Button>

                        <NavLink to="/account-settings" className="text-light top-bar-element">
                            <icon.GearFill size={24} />
                        </NavLink>
                        <NavLink to="/logout" className="text-light top-bar-element">
                            <icon.BoxArrowRight size={24} />
                        </NavLink>
                    </>
                ) : (
                    <>
                        <NavButton
                            to="/register"
                            variant="outline-light"
                            className="mx-1 top-bar-element"
                        >
                            Register
                        </NavButton>
                        <NavButton to="/login" variant="outline-light" className="top-bar-element">
                            Login
                        </NavButton>
                    </>
                )}
            </div>
        </>
    );

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <div className="sticky-top bg-dark z-3">
                        <Row>
                            <TopBar
                                searchComponent={searchComponent}
                                rightComponents={rightComponents}
                            />
                        </Row>
                    </div>

                    <div className="photo-gallery-page bg-dark min-vh-100">
                        {/* Event title and X button */}
                        <Container fluid className="pt-3 pb-1">
                            <Row className="align-items-center">
                                <Col>
                                    {loadingEvent ? (
                                        <div className="text-light">Loading event details...</div>
                                    ) : eventInfo ? (
                                        <div className="d-flex align-items-center flex-wrap text-light">
                                            <h2 className="mb-0 me-3">{eventInfo.title}</h2>
                                            {eventInfo.description && (
                                                <span className="text-secondary fs-5">
                                                    - {eventInfo.description}
                                                </span>
                                            )}
                                        </div>
                                    ) : null}
                                </Col>
                                <Col xs="auto" className="d-flex justify-content-end">
                                    <Button
                                        variant="link"
                                        onClick={handleBackToGallery}
                                        className="me-3 d-flex align-items-center justify-content-center text-secondary"
                                        style={{
                                            padding: '0',
                                            border: 'none',
                                        }}
                                    >
                                        <X size={24} />
                                    </Button>
                                </Col>
                            </Row>
                        </Container>

                        {/* Add space between title and carousel */}
                        <div className="mt-4"></div>

                        {/* Main carousel section */}
                        {selectedOrg && selectedEvent ? (
                            <div className="position-relative">
                                <PhotoCarousel
                                    orgName={selectedOrg}
                                    eventId={selectedEvent}
                                    activeIndex={currentPhotoIndex}
                                    preferredSize="large"
                                    onIndexChange={handleCarouselChange}
                                />
                            </div>
                        ) : (
                            <Container className="text-center text-white my-5">
                                <p>Please select an organization and event to view photos</p>
                            </Container>
                        )}
                    </div>
                </Col>
            </Row>
        </>
    );
};

export default PhotoGalleryPage;
}

src/pages/Photos/viewPhotos.tsx:
{
import React, { useState, useEffect, useRef, useContext } from 'react';
import { Col, Row, Button, Alert } from 'react-bootstrap';
import * as icon from 'react-bootstrap-icons';
import { NavLink, useParams } from 'react-router-dom';

import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import GalleryCard from '../../components/cards/galleryCard/GalleryCard';
import { getAllPhotos, Photo } from '../../context/PhotoService';
import { getPublicOrganizationEvents, Event } from '../../context/OrgService';
import AuthContext from '../../context/AuthContext';
import {
    EventResponse,
    changeEventPublicity,
    getOrganizationEvents,
} from '../../context/OrgService';
import {
    attendEvent,
    getEventAttendees,
    EventUserResponse,
    attendeesResponse,
    EventUser,
} from '../../context/EventService';
import { UserOrgRelationship, isMemberOfOrg } from '../../context/AuthService';

const Photos: React.FC = () => {
    const { user, token } = useContext(AuthContext);
    const [searchTerm, setSearchTerm] = useState('');
    const [photos, setPhotos] = useState<Photo[]>([]);
    const [filteredPhotos, setFilteredPhotos] = useState<Photo[]>([]);
    const [error, setError] = useState<string | null>(null);
    const [loading, setLoading] = useState<boolean>(true);
    const [eventInfo, setEventInfo] = useState<Event | null>(null);
    const [loadingEvent, setLoadingEvent] = useState<boolean>(true);
    const [isAdminUser, setIsAdminUser] = useState(false);
    const [isMember, setIsMember] = useState<UserOrgRelationship | null>(null);
    const [isEventAttendee, setIsEventAttendee] = useState<EventUser | null>(null);
    const [eventPublicity, setEventPublicity] = useState<boolean | null>(null);
    const fetchedRef = useRef(false);
    const { id, eid } = useParams();

    // Fetch event details
    // useEffect(() => {
    //     if (id && eid) {
    //         const fetchEventDetails = async () => {
    //             try {
    //                 setLoadingEvent(true);
    //                 const response = await getPublicOrganizationEvents(id);
    //                 const event = response.data.events.find(e => e.id === eid);

    //                 if (event) {
    //                     setEventInfo(event);
    //                 }

    //                 setLoadingEvent(false);
    //             } catch (err) {
    //                 console.error('Error fetching event details:', err);
    //                 setLoadingEvent(false);
    //             }
    //         };

    //         fetchEventDetails();
    //     }
    // }, [id, eid]);

    // Fetch photos
    // useEffect(() => {
    //     if (fetchedRef.current) return;
    //     fetchedRef.current = true;
    //     fetchPhotos();
    // }, [id, eid]);

    // useEffect(() => {
    //     if (searchTerm.trim() === '') {
    //         setFilteredPhotos(photos);
    //     } else {
    //         const filtered = photos.filter(photo => {
    //             // Search in photo metadata if available
    //             const title = photo.metadata?.title?.toLowerCase() || '';
    //             const description = photo.metadata?.description?.toLowerCase() || '';
    //             const searchLower = searchTerm.toLowerCase();

    //             return title.includes(searchLower) || description.includes(searchLower);
    //         });
    //         setFilteredPhotos(filtered);
    //     }
    // }, [photos, searchTerm]);

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value);
    };

    const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        console.log('Search submitted:', searchTerm);
        // Implement your search logic here photos
    };

    useEffect(() => {
        if (fetchedRef.current) return;
        fetchedRef.current = true;
        checkIfAdmin();
        fetchEventAttendees();
        fetchEventPublicity();
        fetchPhotos();
        fetchUserRole();
        fetchEventDetails();
    }, []);

    useEffect(() => {
        fetchEventPublicity();
    }, []);

    const fetchEventDetails = async () => {
        if (id) {
            try {
                setLoadingEvent(true);
                const response = await getPublicOrganizationEvents(id);
                const event = response.data.events.find(e => e.id === eid);

                if (event) {
                    setEventInfo(event);
                }

                setLoadingEvent(false);
            } catch (err) {
                console.error('Error fetching event details:', err);
                setLoadingEvent(false);
            }
        }
    };

    const fetchPhotos = async () => {
        if (id && eid) {
            try {
                const photos = await getAllPhotos(id, eid);
                console.log(photos);
                setPhotos(prev => [...prev, ...photos.data.photos]);
            } catch (err) {
                setError('Failed to fetch photos.');
            }
        } else {
            setError('Org name or EventId is empty.');
        }
    };

    const fetchUserRole = async (): Promise<UserOrgRelationship | undefined> => {
        if (id && user) {
            try {
                const member = await isMemberOfOrg(user.id, id);
                setIsMember(member.data.data.membership);

                return member.data.data.membership;
            } catch (error) {
                console.error(`Error fetching the member ${id}:`, error);
                throw error;
            }
        }
    };

    const checkIfAdmin = async () => {
        try {
            if (!id || !user) return;

            const result = await fetchUserRole();
            console.log(`userRole: ${result}`);
            if (result) {
                setIsAdminUser(result.role === 'ADMIN');
            }
        } catch (error) {
            console.error('Error checking admin status:', error);
            // Optionally: setError('Could not verify admin status');
        }
    };

    const changePublicity = async () => {
        if (id && eid) {
            try {
                // Immediately toggle UI for better user feedback
                setEventPublicity(prev => !prev);

                // Then make the API call
                const response = await changeEventPublicity(id, eid);

                // If API call fails, we'll revert in the catch block
                console.log('Event publicity API response:', response);
            } catch (error) {
                console.error(`Error changing event publicity ${eid}:`, error);
                // Revert UI state if API call fails
                setEventPublicity(prev => !prev);
                setError('Failed to change event publicity');
            }
        }
    };

    const fetchEventAttendees = async () => {
        if (id && eid && user) {
            try {
                const attendees = await getEventAttendees(id, eid);
                if (attendees) {
                    const isAttending = attendees.find(
                        attendee => (attendee as unknown as string) === user.id
                    );
                    console.log(isAttending);
                    if (isAttending) {
                        setIsEventAttendee(isAttending);
                    }
                }
            } catch (error) {
                console.error(`Error fetching attendees for event ${eid}:`, error);
            }
        }
    };

    const handleAttendEvent = async () => {
        if (!id || !eid || !user) return;

        try {
            const response = await attendEvent(id, eid);
            console.log(`attendees: ${response}`);
            if (response && response.data && response.data.userEvent) {
                setIsEventAttendee(response.data.userEvent); // ✅ Mark user as attending
            }
        } catch (error) {
            console.error(`Failed to attend event ${eid}:`, error);
            setError('Could not attend the event.');
        }
    };

    const fetchEventPublicity = async () => {
        if (!id || !eid) return;

        try {
            const response = await getOrganizationEvents(id);
            const event = response.data.events.find(e => e.id === eid);

            if (event && typeof event.isPublic === 'boolean') {
                setEventPublicity(event.isPublic); // Update state with the actual event's publicity value
            } else {
                console.warn(`Event ${eid} not found in organization ${id}`);
            }
        } catch (error) {
            console.error(`Error fetching publicity for event ${eid}:`, error);
            setError('Could not load event publicity.');
        }
    };

    /* Components to be injected into the TopBar*/
    const searchComponent = (
        <SearchBar
            value={searchTerm}
            onChange={handleSearchChange}
            onSubmit={handleSearchSubmit}
            placeholder="Search Photos..."
            className="ms-3"
        />
    );

    /* Components to be injected into the TopBar*/
    const rightComponents = (
        <>
            <div className="d-flex align-items-center gap-3">
                {/* Create Organization should only appear when an Admin is logged in */}

                {isAdminUser && (
                    <NavButton
                        to={`/organizations/${id}/events/${eid}/photos/upload`}
                        variant="outline-light"
                        className="mx-1 top-bar-element"
                    >
                        Upload Photos
                    </NavButton>
                )}
                <NavLink to="/account-settings" className="text-light top-bar-element">
                    <icon.GearFill size={24} />
                </NavLink>
                <NavLink to="/logout" className="text-light top-bar-element">
                    <icon.BoxArrowRight size={24} />
                </NavLink>
            </div>
        </>
    );

    const pageActionComponents = (
        <div className="d-flex align-items-center gap-3">
            {!isEventAttendee && isMember && (
                <Button
                    onClick={handleAttendEvent}
                    className="top-bar-element custom-create-button"
                >
                    Attend Event
                </Button>
            )}

            {user &&
                token &&
                (isAdminUser ? (
                    <Button
                        onClick={changePublicity}
                        className="icon-only-button"
                        key={`publicity-${eventPublicity}`}
                    >
                        {eventPublicity ? (
                            <icon.UnlockFill size={20} />
                        ) : (
                            <icon.LockFill size={20} />
                        )}
                    </Button>
                ) : eventPublicity ? (
                    <icon.UnlockFill size={24} />
                ) : (
                    <icon.LockFill size={24} />
                ))}

            <NavLink to={`/organizations/${id}/events/${eid}/details`} className="icon-only-button">
                <icon.ListUl size={24} />
            </NavLink>
        </div>
    );

    return (
        <>
            <Row className="g-0">
                <Col md="auto" className="sidebar-container">
                    <Sidebar />
                </Col>
                <Col className="main-content p-0">
                    <div className="sticky-top bg-dark z-3">
                        <Row>
                            <TopBar
                                searchComponent={searchComponent}
                                rightComponents={rightComponents}
                            />
                        </Row>
                    </div>
                    <div className="p-3 bg-dark text-white">
                        <Row className="align-items-center mb-4">
                            <Col>
                                <h1 className="mb-4">
                                    Photos:
                                    {eventInfo?.title && <span> {eventInfo.title}</span>}
                                </h1>
                            </Col>

                            <Col xs="auto" className="ms-auto me-5">
                                {pageActionComponents}
                            </Col>
                        </Row>
                        <Row>
                            {error && <p className="text-red-500">{error}</p>}

                            {photos.map(photo => (
                                <Col>
                                    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-4">
                                        <div className="gallery-card photo">
                                            <GalleryCard
                                                key={photo.id}
                                                item={photo}
                                                className={`photo-card`}
                                                orgName={id}
                                            />
                                        </div>
                                    </div>
                                </Col>
                            ))}
                        </Row>
                    </div>
                </Col>
            </Row>
        </>
    );
};

export default Photos;
}

src/pages/PhotoTagging/PhotoTaggingPage.tsx:
{
import React, { useState, useEffect, useContext } from 'react';
import { Container, Row, Col, Button, Alert, Spinner } from 'react-bootstrap';
import { NavLink, useParams, useNavigate } from 'react-router-dom';
import * as icon from 'react-bootstrap-icons';
import AuthContext from '../../context/AuthContext';

// Import components
import Sidebar from '../../components/bars/SideBar/SideBar';
import TopBar from '../../components/bars/TopBar/TopBar';
import SearchBar from '../../components/bars/SearchBar/SearchBar';
import NavButton from '../../components/navButton/NavButton';
import MemberCard from '../../components/cards/memberCard/MemberCard';
import axiosInstance from '../../utils/axios';
import { getEventAttendees } from '../../context/EventService';

// Define types for our data models
interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
}

interface Member {
  PK: string;
  SK: string;
  userId: string;
  role: string;
  joinDate: string;
  organizationName: string;
  userDetails: User;
}

interface EventAttendee extends Member {
  eventId: string;
}

const PhotoTaggingPage: React.FC = () => {
  const navigate = useNavigate();
  const { id: orgId, eid: eventId, photoId } = useParams();
  const { user, token } = useContext(AuthContext);
  
  // State for search and members
  const [searchTerm, setSearchTerm] = useState('');
  const [attendees, setAttendees] = useState<EventAttendee[]>([]);
  const [filteredAttendees, setFilteredAttendees] = useState<EventAttendee[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [selectedMembers, setSelectedMembers] = useState<string[]>([]);
  const [submitting, setSubmitting] = useState<boolean>(false);
  const [eventName, setEventName] = useState<string>('');
  
  // Pagination state - modified for better scrolling experience
  const [initialDisplayCount, setInitialDisplayCount] = useState<number>(12); // Initial number to display
  const [displayCount, setDisplayCount] = useState<number>(12); // Current display count
  const [hasMore, setHasMore] = useState<boolean>(true);
  const [loadingMore, setLoadingMore] = useState<boolean>(false);
  const [lastEvaluatedKey, setLastEvaluatedKey] = useState<string | null>(null);

  // Fetch attendees for the event
  useEffect(() => {
    const fetchAttendees = async () => {
      if (!orgId || !eventId || !photoId) {
        setError('Missing organization, event, or photo ID');
        setLoading(false);
        return;
      }
      
      try {
        setLoading(true);
        setError(null);
        
        // First get event details to display the event name
        try {
          const eventResponse = await axiosInstance.get(`/organizations/${orgId}/events/${eventId}`);
          if (eventResponse.data && eventResponse.data.data && eventResponse.data.data.event) {
            setEventName(eventResponse.data.data.event.title);
          }
        } catch (eventError) {
          console.error('Error fetching event details:', eventError);
          // Continue with attendee fetching even if event details fail
        }
        
        // Fetch event attendees using the correct endpoint and handling
        try {
          // Using the getEventAttendees helper from EventService for consistency
          const attendees = await getEventAttendees(orgId, eventId);
          
          console.log('Raw attendees response:', attendees); // Debug log
          
          if (attendees && attendees.length > 0) {
            // Transform attendees to expected format if needed
            const formattedAttendees = await Promise.all(
              attendees.map(async (attendee) => {
                // Extract userId from format like USER#userId
                const userId = attendee.includes('#') ? 
                  attendee.split('#')[1] : 
                  attendee;
                
                // Fetch user details for this attendee
                try {
                  const userResponse = await axiosInstance.get(`/users/${userId}`);
                  const userData = userResponse.data.data?.user || {};
                  
                  // Create a properly formatted attendee object
                  return {
                    PK: `USER#${userId}`,
                    SK: `EVENT#${eventId}`,
                    userId: userId,
                    role: 'MEMBER', // Default role
                    joinDate: new Date().toISOString(),
                    organizationName: orgId,
                    eventId: eventId,
                    userDetails: {
                      id: userId,
                      email: userData.email || 'email@example.com',
                      firstName: userData.firstName || 'User',
                      lastName: userData.lastName || userId,
                    }
                  };
                } catch (userError) {
                  console.error(`Error fetching details for user ${userId}:`, userError);
                  // Return a placeholder object with available info
                  return {
                    PK: `USER#${userId}`,
                    SK: `EVENT#${eventId}`,
                    userId: userId,
                    role: 'MEMBER',
                    joinDate: new Date().toISOString(),
                    organizationName: orgId,
                    eventId: eventId,
                    userDetails: {
                      id: userId,
                      email: 'email@example.com',
                      firstName: 'User',
                      lastName: userId,
                    }
                  };
                }
              })
            );
            
            console.log('Formatted attendees:', formattedAttendees); // Debug log
            setAttendees(formattedAttendees);
            setFilteredAttendees(formattedAttendees);
            
            // Update hasMore based on number of attendees vs. initial display count
            setHasMore(formattedAttendees.length > initialDisplayCount);
          } else {
            console.log('No attendees found or invalid response format');
            setAttendees([]);
            setFilteredAttendees([]);
            setHasMore(false);
          }
        } catch (attendeesError) {
          console.error('Error fetching attendees:', attendeesError);
          throw attendeesError;
        }
        
        setLoading(false);
      } catch (err) {
        console.error('Error in main fetchAttendees function:', err);
        setError('Failed to load event attendees. Please try again later.');
        setLoading(false);
      }
    };
    
    fetchAttendees();
  }, [orgId, eventId, photoId, initialDisplayCount]);
  
  // Handle load more function
  const handleLoadMore = () => {
    setLoadingMore(true);
    
    // Simulate loading delay for better UX (remove in production)
    setTimeout(() => {
      // Increase display count by the initial batch size
      const newDisplayCount = displayCount + initialDisplayCount;
      setDisplayCount(newDisplayCount);
      
      // Check if we've reached the end of our data
      setHasMore(newDisplayCount < filteredAttendees.length);
      setLoadingMore(false);
    }, 500);
  };
  
  // Filter attendees based on search term
  useEffect(() => {
    if (searchTerm.trim() === '') {
      setFilteredAttendees(attendees);
      // Reset display count when clearing search
      setDisplayCount(initialDisplayCount);
      setHasMore(attendees.length > initialDisplayCount);
    } else {
      const filtered = attendees.filter((attendee: EventAttendee) => {
        const { firstName, lastName, email } = attendee.userDetails;
        const fullName = `${firstName} ${lastName}`.toLowerCase();
        const searchLower = searchTerm.toLowerCase();
        
        return fullName.includes(searchLower) || email.toLowerCase().includes(searchLower);
      });
      
      setFilteredAttendees(filtered);
      // Show all search results immediately
      setDisplayCount(filtered.length);
      setHasMore(false);
    }
  }, [attendees, searchTerm, initialDisplayCount]);
  
  // Get the currently visible members based on display count
  const visibleAttendees = filteredAttendees.slice(0, displayCount);
  
  // Handle search change
  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };
  
  const handleSearchSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
  };
  
  // Toggle member selection
  const handleMemberSelect = (memberId: string) => {
    setSelectedMembers(prev => {
      if (prev.includes(memberId)) {
        return prev.filter(id => id !== memberId);
      } else {
        return [...prev, memberId];
      }
    });
  };
  
  // Submit tags
  const handleSubmitTags = async () => {
    if (selectedMembers.length === 0) {
      setError('Please select at least one member to tag');
      return;
    }
    
    if (!orgId || !eventId || !photoId) {
      setError('Missing organization, event, or photo ID');
      return;
    }
    
    try {
      setSubmitting(true);
      setError(null);
      
      const response = await axiosInstance.post(
        `/organizations/${orgId}/events/${eventId}/photos/${photoId}/tags`,
        { userIds: selectedMembers }
      );
      
      console.log('Tag response:', response.data);
      setSuccess('Members tagged successfully!');
      setSubmitting(false);
      
      // Redirect back to photo page after a short delay
      setTimeout(() => {
        navigate(`/organizations/${orgId}/events/${eventId}/photos/${photoId}`);
      }, 1500);
      
    } catch (err: any) {
      console.error('Error tagging members:', err);
      
      if (err.response && err.response.data && err.response.data.message) {
        setError(err.response.data.message);
      } else {
        setError('Failed to tag members. Please try again.');
      }
      
      setSubmitting(false);
    }
  };
  
  // Handle cancel
  const handleCancel = () => {
    navigate(`/organizations/${orgId}/events/${eventId}/photos/${photoId}`);
  };
  
  // TopBar components
  const searchComponent = (
    <SearchBar
      value={searchTerm}
      onChange={handleSearchChange}
      onSubmit={handleSearchSubmit}
      placeholder="Search members..."
      className="ms-3"
    />
  );
  
  const rightComponents = (
    <>
      <div className="d-flex align-items-center gap-3">
        {user && token ? (
          <>
            <NavLink to="/account-settings" className="text-light top-bar-element">
              <icon.GearFill size={24} />
            </NavLink>
            <NavLink to="/logout" className="text-light top-bar-element">
              <icon.BoxArrowRight size={24} />
            </NavLink>
          </>
        ) : (
          <>
            <NavButton
              to="/register"
              variant="outline-light"
              className="mx-1 top-bar-element"
            >
              Register
            </NavButton>
            <NavButton to="/login" variant="outline-light" className="top-bar-element">
              Login
            </NavButton>
          </>
        )}
      </div>
    </>
  );
  
  return (
    <>
      <Row className="g-0">
        <Col md="auto" className="sidebar-container">
          <Sidebar />
        </Col>
        <Col className="main-content p-0">
          <div className="sticky-top bg-dark z-3">
            <Row>
              <TopBar
                searchComponent={searchComponent}
                rightComponents={rightComponents}
              />
            </Row>
          </div>
          
          <div className="photo-tagging-page bg-dark text-light min-vh-100">
            <Container fluid className="px-4 pt-4">
              <div className="d-flex justify-content-between align-items-center mb-4">
                <h1 className="mb-0">Photos: {eventName}</h1>
                <NavButton
                  to={`/organizations/${orgId}/events/${eventId}/photos/${photoId}`}
                  variant="outline-light"
                >
                  <icon.X size={24} className="me-2" />
                  Close
                </NavButton>
              </div>
              
              <h2 className="fs-3 mb-4 text-center">Select the members that you want to tag</h2>
              
              {/* Error and Success Alerts */}
              {error && (
                <Alert variant="danger" dismissible onClose={() => setError(null)}>
                  {error}
                </Alert>
              )}
              
              {success && (
                <Alert variant="success" dismissible onClose={() => setSuccess(null)}>
                  {success}
                </Alert>
              )}
              
              <h3 className="mb-3">Members who attended:</h3>
              
              {loading ? (
                <div className="text-center p-5">
                  <Spinner animation="border" variant="light" />
                  <p className="mt-3">Loading event attendees...</p>
                </div>
              ) : filteredAttendees.length === 0 ? (
                <div className="text-center p-5">
                  {searchTerm ? 'No matching members found.' : 'No members attended this event.'}
                </div>
              ) : (
                <>
                  {/* Display members in a card grid layout */}
                  <Row className="g-4 member-cards-container mb-4">
                    {visibleAttendees.map((attendee: EventAttendee) => (
                      <Col xs={12} sm={6} md={4} lg={3} key={attendee.userId} className="d-flex justify-content-center">
                        <MemberCard
                          member={attendee}
                          isSelected={selectedMembers.includes(attendee.userId)}
                          onSelect={handleMemberSelect}
                        />
                      </Col>
                    ))}
                  </Row>
                  
                  {/* Load More Button */}
                  {!searchTerm && hasMore && (
                    <div className="text-center mt-4 mb-5">
                      <Button
                        variant="primary"
                        onClick={handleLoadMore}
                        disabled={loadingMore}
                        className="load-more-button"
                      >
                        {loadingMore ? (
                          <>
                            <Spinner
                              as="span"
                              animation="border"
                              size="sm"
                              role="status"
                              aria-hidden="true"
                              className="me-2"
                            />
                            Loading...
                          </>
                        ) : (
                          'Load More'
                        )}
                      </Button>
                    </div>
                  )}
                </>
              )}
              
              {/* Action Buttons */}
              <div className="action-buttons-container d-flex justify-content-between my-4">
                <Button
                  variant="secondary"
                  onClick={handleCancel}
                  disabled={submitting}
                >
                  Cancel
                </Button>
                
                <Button
                  variant="secondary"
                  onClick={handleSubmitTags}
                  disabled={selectedMembers.length === 0 || submitting}
                >
                  {submitting ? (
                    <>
                      <Spinner
                        as="span"
                        animation="border"
                        size="sm"
                        role="status"
                        aria-hidden="true"
                        className="me-2"
                      />
                      Tagging...
                    </>
                  ) : (
                    `Tag selected members (${selectedMembers.length})`
                  )}
                </Button>
              </div>
            </Container>
          </div>
        </Col>
      </Row>
    </>
  );
};

export default PhotoTaggingPage;}

src/pages/Register/Register.tsx:
{
// import '../../styles/auth.css';
import AuthContext from '../../context/AuthContext';
import { useState, useContext } from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import { registerUser } from '../../context/AuthService';
import { ArrowLeft } from 'react-bootstrap-icons';

import FormContainer from '../../components/forms/FormContainer/FormContainer';
import AuthForm from '../../components/forms/AuthForm/AuthForm';
import FormInput from '../../components/forms/FormInput/FormInput';
import FormButton from '../../components/forms/FormButton/FormButton';
import FormRow from '../../components/forms/FormRow/FormRow';
import NavButton from '../../components/navButton/NavButton';

const Register: React.FC = () => {
    const context = useContext(AuthContext);
    const navigate = useNavigate();

    const [userData, setUserData] = useState({
        email: '',
        password: '',
        firstName: '',
        lastName: '',
    });

    const [error, setError] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { id, value } = e.target;
        setUserData(prev => ({
            ...prev,
            [id.replace('form', '')]: value,
        }));
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        const { email, password, firstName, lastName } = userData;

        if (!email || !password || !firstName || !lastName) {
            setError('Please fill in all fields');
            return;
        }
        setError(null);

        try {
            const response = await registerUser({ email, password, firstName, lastName });
            const token = response.data.data.token;
            const user = response.data.data.user;

            localStorage.setItem('token', token);
            localStorage.setItem('user', JSON.stringify(user));

            context?.setToken(token);
            context?.setUser(user);
            navigate('/');
        } catch (error) {
            console.error(error);
            setError('Registration Failed.');
        }
    };

    return (
        <FormContainer>
            <NavLink to="/" className="back-button text-white">
                <ArrowLeft className="me-1" />
                Back to home
            </NavLink>
            <AuthForm title="PHOTOCOMP" onSubmit={handleSubmit} error={error}>
                <FormRow>
                    <FormInput
                        id="formfirstName"
                        type="text"
                        placeholder="First Name"
                        value={userData.firstName}
                        onChange={handleChange}
                        required
                        className="mb-2"
                    />
                    <FormInput
                        id="formlastName"
                        type="text"
                        placeholder="Last Name"
                        value={userData.lastName}
                        onChange={handleChange}
                        required
                        className="mb-2"
                    />
                </FormRow>

                <FormInput
                    id="formemail"
                    type="email"
                    placeholder="Email"
                    value={userData.email}
                    onChange={handleChange}
                    required
                    className="w-100 mb-3"
                />

                <FormInput
                    id="formpassword"
                    type="password"
                    placeholder="Password"
                    value={userData.password}
                    onChange={handleChange}
                    required
                    className="w-100 mb-3"
                />

                <FormButton type="submit" variant="light" className="w-100">
                    Register
                </FormButton>

                <FormButton type="button" onClick={() => navigate('/login')} className="w-100">
                    Already have an account? Login
                </FormButton>
            </AuthForm>
        </FormContainer>
    );
};

export default Register;
}

src/pages/Register.tsx:
{
import '../styles/auth.css';
import AuthContext from '../context/AuthContext';
import { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { registerUser } from '../context/AuthService';

// Import our custom components
import FormContainer from '../components/forms/FormContainer';
import AuthForm from '../components/forms/AuthForm';
import FormInput from '../components/forms/FormInput';
import FormButton from '../components/forms/FormButton';

const Register: React.FC = () => {
    const context = useContext(AuthContext);
    const navigate = useNavigate();

    const [userData, setUserData] = useState({
        email: '',
        password: '',
        username: '',
        firstName: '',
        lastName: '',
    });

    const [error, setError] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { id, value } = e.target;
        setUserData(prev => ({
            ...prev,
            [id.replace('form', '').toLowerCase()]: value,
        }));
    };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        const { email, password, username, firstName, lastName } = userData;

        if (!email || !password || !username || !firstName || !lastName) {
            setError('Please fill in all fields');
            return;
        }
        setError(null);

        try {
            const response = await registerUser({ email, password, username, firstName, lastName });
            const token = response.data.data.token;
            const user = response.data.data.user;

            localStorage.setItem('token', token);
            localStorage.setItem('user', JSON.stringify(user));

            context?.setToken(token);
            context?.setUser(user);
            navigate('/');
        } catch (error) {
            console.error(error);
            setError('Registration Failed.');
        }
    };

    return (
        <FormContainer>
            <AuthForm title="PHOTOCOMP" onSubmit={handleSubmit} error={error}>
                <FormInput
                    id="formEmail"
                    type="email"
                    placeholder="Email"
                    value={userData.email}
                    onChange={handleChange}
                    required
                />

                <FormInput
                    id="formPassword"
                    type="password"
                    placeholder="Password"
                    value={userData.password}
                    onChange={handleChange}
                    required
                />

                <FormInput
                    id="formUsername"
                    type="text"
                    placeholder="Username"
                    value={userData.username}
                    onChange={handleChange}
                    required
                />

                <FormInput
                    id="formFirstName"
                    type="text"
                    placeholder="First Name"
                    value={userData.firstName}
                    onChange={handleChange}
                    required
                />

                <FormInput
                    id="formLastName"
                    type="text"
                    placeholder="Last Name"
                    value={userData.lastName}
                    onChange={handleChange}
                    required
                />

                <FormButton type="submit" variant="light">
                    Register
                </FormButton>

                <FormButton type="button" onClick={() => navigate('/login')}>
                    Already have an account? Login
                </FormButton>
            </AuthForm>
        </FormContainer>
    );
};

export default Register;
}

src/types/images.d.ts:
{
// src/types/images.d.ts
declare module '*.png' {
    const value: string;
    export default value;
}
}

src/utils/axios.tsx:
{
import axios from 'axios';

const AXIOS_DEFAULTS = {
    baseURL: 'http://localhost:3000',
    headers: {
        'Content-Type': 'application/json',
    },
};

export const noAuthInstance = axios.create(AXIOS_DEFAULTS);

const axiosInstance = axios.create(AXIOS_DEFAULTS);

axiosInstance.interceptors.request.use(
    config => {
        const token = localStorage.getItem('token');
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
    },
    error => Promise.reject(error)
);

axiosInstance.interceptors.response.use(
    response => response,
    error => {
        console.error('API error:', error);
        return Promise.reject(error);
    }
);

export default axiosInstance;
}

src/utils/test-utils.tsx:
{
import React, { ReactElement } from 'react';
import { render, RenderOptions } from '@testing-library/react';
import { MemoryRouter } from 'react-router-dom';

// Mock AuthContext
import AuthContext, { AuthContextType } from '../context/AuthContext';

interface MockAuthContext {
    user: any;
    token: any;
    setUser: any;
    setToken: any;
    logout: any;
}

const mockAuthContext: MockAuthContext = {
    user: null,
    token: null,
    setUser: jest.fn(),
    setToken: jest.fn(),
    logout: jest.fn(),
};

interface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {
    route?: string;
    authContext?: AuthContextType; // Update to use the explicit type
}

/**
 * Custom render function that wraps components with MemoryRouter and AuthContext
 *
 * Used to allow components to route in the tests in the case a component uses
 * react-router-dom with some auth context (protected routes).
 *
 */
export function renderWithRouter(
    ui: ReactElement,
    { route = '/', authContext = mockAuthContext, ...renderOptions }: CustomRenderOptions = {}
) {
    return render(
        <MemoryRouter initialEntries={[route]}>
            <AuthContext.Provider value={authContext}>{ui}</AuthContext.Provider>
        </MemoryRouter>,
        renderOptions
    );
}
}

src/vite-env.d.ts:
{
/// <reference types="vite/client" />
declare module '*.png';
}

